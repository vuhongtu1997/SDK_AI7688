# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_sm130', [dirname(__file__)])
        except ImportError:
            import _pyupm_sm130
            return _pyupm_sm130
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_sm130', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_sm130 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_sm130
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_sm130.SM130_DEFAULT_UART_swigconstant(_pyupm_sm130)
SM130_DEFAULT_UART = _pyupm_sm130.SM130_DEFAULT_UART

_pyupm_sm130.SM130_DEFAULT_RESET_PIN_swigconstant(_pyupm_sm130)
SM130_DEFAULT_RESET_PIN = _pyupm_sm130.SM130_DEFAULT_RESET_PIN
class SM130(_object):
    """Proxy of C++ upm::SM130 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SM130, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SM130, name)
    __repr__ = _swig_repr
    CMD_RESET = _pyupm_sm130.SM130_CMD_RESET
    CMD_VERSION = _pyupm_sm130.SM130_CMD_VERSION
    CMD_SEEK_TAG = _pyupm_sm130.SM130_CMD_SEEK_TAG
    CMD_SELECT_TAG = _pyupm_sm130.SM130_CMD_SELECT_TAG
    CMD_AUTHENTICATE = _pyupm_sm130.SM130_CMD_AUTHENTICATE
    CMD_READ16 = _pyupm_sm130.SM130_CMD_READ16
    CMD_READ_VALUE = _pyupm_sm130.SM130_CMD_READ_VALUE
    CMD_WRITE16 = _pyupm_sm130.SM130_CMD_WRITE16
    CMD_WRITE_VALUE = _pyupm_sm130.SM130_CMD_WRITE_VALUE
    CMD_WRITE4 = _pyupm_sm130.SM130_CMD_WRITE4
    CMD_WRITE_KEY = _pyupm_sm130.SM130_CMD_WRITE_KEY
    CMD_INC_VALUE = _pyupm_sm130.SM130_CMD_INC_VALUE
    CMD_DEC_VALUE = _pyupm_sm130.SM130_CMD_DEC_VALUE
    CMD_ANTENNA_POWER = _pyupm_sm130.SM130_CMD_ANTENNA_POWER
    CMD_READ_PORT = _pyupm_sm130.SM130_CMD_READ_PORT
    CMD_WRITE_PORT = _pyupm_sm130.SM130_CMD_WRITE_PORT
    CMD_HALT_TAG = _pyupm_sm130.SM130_CMD_HALT_TAG
    CMD_SET_BAUD = _pyupm_sm130.SM130_CMD_SET_BAUD
    CMD_SLEEP = _pyupm_sm130.SM130_CMD_SLEEP
    TAG_NONE = _pyupm_sm130.SM130_TAG_NONE
    TAG_MIFARE_ULTRALIGHT = _pyupm_sm130.SM130_TAG_MIFARE_ULTRALIGHT
    TAG_MIFARE_1K = _pyupm_sm130.SM130_TAG_MIFARE_1K
    TAG_MIFARE_4K = _pyupm_sm130.SM130_TAG_MIFARE_4K
    TAG_UNKNOWN = _pyupm_sm130.SM130_TAG_UNKNOWN
    KEY_TYPE_EEPROM_A0 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A0
    KEY_TYPE_EEPROM_A1 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A1
    KEY_TYPE_EEPROM_A2 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A2
    KEY_TYPE_EEPROM_A3 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A3
    KEY_TYPE_EEPROM_A4 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A4
    KEY_TYPE_EEPROM_A5 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A5
    KEY_TYPE_EEPROM_A6 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A6
    KEY_TYPE_EEPROM_A7 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A7
    KEY_TYPE_EEPROM_A8 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A8
    KEY_TYPE_EEPROM_A9 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A9
    KEY_TYPE_EEPROM_A10 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A10
    KEY_TYPE_EEPROM_A11 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A11
    KEY_TYPE_EEPROM_A12 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A12
    KEY_TYPE_EEPROM_A13 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A13
    KEY_TYPE_EEPROM_A14 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A14
    KEY_TYPE_EEPROM_A15 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_A15
    KEY_TYPE_EEPROM_B0 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B0
    KEY_TYPE_EEPROM_B1 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B1
    KEY_TYPE_EEPROM_B2 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B2
    KEY_TYPE_EEPROM_B3 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B3
    KEY_TYPE_EEPROM_B4 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B4
    KEY_TYPE_EEPROM_B5 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B5
    KEY_TYPE_EEPROM_B6 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B6
    KEY_TYPE_EEPROM_B7 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B7
    KEY_TYPE_EEPROM_B8 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B8
    KEY_TYPE_EEPROM_B9 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B9
    KEY_TYPE_EEPROM_B10 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B10
    KEY_TYPE_EEPROM_B11 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B11
    KEY_TYPE_EEPROM_B12 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B12
    KEY_TYPE_EEPROM_B13 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B13
    KEY_TYPE_EEPROM_B14 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B14
    KEY_TYPE_EEPROM_B15 = _pyupm_sm130.SM130_KEY_TYPE_EEPROM_B15
    KEY_TYPE_A = _pyupm_sm130.SM130_KEY_TYPE_A
    KEY_TYPE_B = _pyupm_sm130.SM130_KEY_TYPE_B
    KEY_TYPE_A_AND_TRANSPORT_F = _pyupm_sm130.SM130_KEY_TYPE_A_AND_TRANSPORT_F

    def __init__(self, uart=0, reset=13):
        """
        __init__(upm::SM130 self, int uart=0, int reset=13) -> SM130

        Parameters:
            uart: int
            reset: int

        __init__(upm::SM130 self, int uart=0) -> SM130

        Parameters:
            uart: int

        __init__(upm::SM130 self) -> SM130
        """
        this = _pyupm_sm130.new_SM130(uart, reset)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_sm130.delete_SM130
    __del__ = lambda self: None

    def setBaudRate(self, baud=19200):
        """
        setBaudRate(SM130 self, int baud=19200) -> mraa::Result

        Parameters:
            baud: int

        setBaudRate(SM130 self) -> mraa::Result

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_setBaudRate(self, baud)


    def getFirmwareVersion(self):
        """
        getFirmwareVersion(SM130 self) -> std::string

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getFirmwareVersion(self)


    def reset(self):
        """
        reset(SM130 self) -> bool

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_reset(self)


    def hardwareReset(self):
        """
        hardwareReset(SM130 self)

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_hardwareReset(self)


    def select(self):
        """
        select(SM130 self) -> bool

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_select(self)


    def waitForTag(self, timeout):
        """
        waitForTag(SM130 self, uint32_t timeout) -> bool

        Parameters:
            timeout: uint32_t

        """
        return _pyupm_sm130.SM130_waitForTag(self, timeout)


    def authenticate(self, *args):
        """
        authenticate(SM130 self, uint8_t block, upm::SM130::KEY_TYPES_T keyType, std::string key) -> bool

        Parameters:
            block: uint8_t
            keyType: enum upm::SM130::KEY_TYPES_T
            key: std::string

        authenticate(SM130 self, uint8_t block, upm::SM130::KEY_TYPES_T keyType) -> bool

        Parameters:
            block: uint8_t
            keyType: enum upm::SM130::KEY_TYPES_T

        """
        return _pyupm_sm130.SM130_authenticate(self, *args)


    def readBlock16(self, block):
        """
        readBlock16(SM130 self, uint8_t block) -> std::string

        Parameters:
            block: uint8_t

        """
        return _pyupm_sm130.SM130_readBlock16(self, block)


    def readValueBlock(self, block):
        """
        readValueBlock(SM130 self, uint8_t block) -> int32_t

        Parameters:
            block: uint8_t

        """
        return _pyupm_sm130.SM130_readValueBlock(self, block)


    def writeBlock16(self, block, contents):
        """
        writeBlock16(SM130 self, uint8_t block, std::string contents) -> bool

        Parameters:
            block: uint8_t
            contents: std::string

        """
        return _pyupm_sm130.SM130_writeBlock16(self, block, contents)


    def writeValueBlock(self, block, value):
        """
        writeValueBlock(SM130 self, uint8_t block, int32_t value) -> bool

        Parameters:
            block: uint8_t
            value: int32_t

        """
        return _pyupm_sm130.SM130_writeValueBlock(self, block, value)


    def writeBlock4(self, block, contents):
        """
        writeBlock4(SM130 self, uint8_t block, std::string contents) -> bool

        Parameters:
            block: uint8_t
            contents: std::string

        """
        return _pyupm_sm130.SM130_writeBlock4(self, block, contents)


    def writeKey(self, eepromSector, keyType, key):
        """
        writeKey(SM130 self, uint8_t eepromSector, upm::SM130::KEY_TYPES_T keyType, std::string key) -> bool

        Parameters:
            eepromSector: uint8_t
            keyType: enum upm::SM130::KEY_TYPES_T
            key: std::string

        """
        return _pyupm_sm130.SM130_writeKey(self, eepromSector, keyType, key)


    def adjustValueBlock(self, block, value, incr):
        """
        adjustValueBlock(SM130 self, uint8_t block, int32_t value, bool incr) -> int32_t

        Parameters:
            block: uint8_t
            value: int32_t
            incr: bool

        """
        return _pyupm_sm130.SM130_adjustValueBlock(self, block, value, incr)


    def setAntennaPower(self, on):
        """
        setAntennaPower(SM130 self, bool on) -> bool

        Parameters:
            on: bool

        """
        return _pyupm_sm130.SM130_setAntennaPower(self, on)


    def readPorts(self):
        """
        readPorts(SM130 self) -> uint8_t

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_readPorts(self)


    def writePorts(self, val):
        """
        writePorts(SM130 self, uint8_t val) -> bool

        Parameters:
            val: uint8_t

        """
        return _pyupm_sm130.SM130_writePorts(self, val)


    def haltTag(self):
        """
        haltTag(SM130 self) -> bool

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_haltTag(self)


    def setSM130BaudRate(self, baud):
        """
        setSM130BaudRate(SM130 self, int baud) -> bool

        Parameters:
            baud: int

        """
        return _pyupm_sm130.SM130_setSM130BaudRate(self, baud)


    def sleep(self):
        """
        sleep(SM130 self) -> bool

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_sleep(self)


    def getLastErrorCode(self):
        """
        getLastErrorCode(SM130 self) -> char

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getLastErrorCode(self)


    def getLastErrorString(self):
        """
        getLastErrorString(SM130 self) -> std::string

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getLastErrorString(self)


    def getUIDLen(self):
        """
        getUIDLen(SM130 self) -> int

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getUIDLen(self)


    def getUID(self):
        """
        getUID(SM130 self) -> std::string

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getUID(self)


    def getTagType(self):
        """
        getTagType(SM130 self) -> upm::SM130::TAG_TYPE_T

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getTagType(self)


    def tag2String(self, tag):
        """
        tag2String(SM130 self, upm::SM130::TAG_TYPE_T tag) -> std::string

        Parameters:
            tag: enum upm::SM130::TAG_TYPE_T

        """
        return _pyupm_sm130.SM130_tag2String(self, tag)


    def string2HexString(self, input):
        """
        string2HexString(SM130 self, std::string input) -> std::string

        Parameters:
            input: std::string

        """
        return _pyupm_sm130.SM130_string2HexString(self, input)

SM130_swigregister = _pyupm_sm130.SM130_swigregister
SM130_swigregister(SM130)

# This file is compatible with both classic and new-style classes.


