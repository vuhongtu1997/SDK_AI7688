# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_hmtrp', [dirname(__file__)])
        except ImportError:
            import _pyupm_hmtrp
            return _pyupm_hmtrp
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_hmtrp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_hmtrp = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_hmtrp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_hmtrp.new_uint8Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hmtrp.delete_uint8Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_hmtrp.uint8Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_hmtrp.uint8Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_hmtrp.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_hmtrp.uint8Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_hmtrp.uint8Array_frompointer)
uint8Array_swigregister = _pyupm_hmtrp.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(t):
    return _pyupm_hmtrp.uint8Array_frompointer(t)
uint8Array_frompointer = _pyupm_hmtrp.uint8Array_frompointer

class uint16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_hmtrp.new_uint16Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hmtrp.delete_uint16Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_hmtrp.uint16Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_hmtrp.uint16Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_hmtrp.uint16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_hmtrp.uint16Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_hmtrp.uint16Array_frompointer)
uint16Array_swigregister = _pyupm_hmtrp.uint16Array_swigregister
uint16Array_swigregister(uint16Array)

def uint16Array_frompointer(t):
    return _pyupm_hmtrp.uint16Array_frompointer(t)
uint16Array_frompointer = _pyupm_hmtrp.uint16Array_frompointer

class uint32Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_hmtrp.new_uint32Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hmtrp.delete_uint32Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_hmtrp.uint32Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_hmtrp.uint32Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_hmtrp.uint32Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_hmtrp.uint32Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_hmtrp.uint32Array_frompointer)
uint32Array_swigregister = _pyupm_hmtrp.uint32Array_swigregister
uint32Array_swigregister(uint32Array)

def uint32Array_frompointer(t):
    return _pyupm_hmtrp.uint32Array_frompointer(t)
uint32Array_frompointer = _pyupm_hmtrp.uint32Array_frompointer


_pyupm_hmtrp.HMTRP_DEFAULT_UART_swigconstant(_pyupm_hmtrp)
HMTRP_DEFAULT_UART = _pyupm_hmtrp.HMTRP_DEFAULT_UART
class HMTRP(_object):
    """Proxy of C++ upm::HMTRP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HMTRP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HMTRP, name)
    __repr__ = _swig_repr
    RESET = _pyupm_hmtrp.HMTRP_RESET
    GET_CONFIG = _pyupm_hmtrp.HMTRP_GET_CONFIG
    SET_FREQUENCY = _pyupm_hmtrp.HMTRP_SET_FREQUENCY
    SET_RF_DATARATE = _pyupm_hmtrp.HMTRP_SET_RF_DATARATE
    SET_RX_BW = _pyupm_hmtrp.HMTRP_SET_RX_BW
    SET_FREQ_MODULATION = _pyupm_hmtrp.HMTRP_SET_FREQ_MODULATION
    SET_TX_POWER = _pyupm_hmtrp.HMTRP_SET_TX_POWER
    SET_UART_SPEED = _pyupm_hmtrp.HMTRP_SET_UART_SPEED
    GET_RF_SIGNAL_STR = _pyupm_hmtrp.HMTRP_GET_RF_SIGNAL_STR
    GET_MOD_SIGNAL_STR = _pyupm_hmtrp.HMTRP_GET_MOD_SIGNAL_STR

    def __init__(self, uart=0):
        """
        __init__(upm::HMTRP self, int uart=0) -> HMTRP

        Parameters:
            uart: int

        __init__(upm::HMTRP self) -> HMTRP
        """
        this = _pyupm_hmtrp.new_HMTRP(uart)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hmtrp.delete_HMTRP
    __del__ = lambda self: None

    def dataAvailable(self, millis=0):
        """
        dataAvailable(HMTRP self, unsigned int millis=0) -> bool

        Parameters:
            millis: unsigned int

        dataAvailable(HMTRP self) -> bool

        Parameters:
            self: upm::HMTRP *

        """
        return _pyupm_hmtrp.HMTRP_dataAvailable(self, millis)


    def readData(self, buffer, len, millis=-1):
        """
        readData(HMTRP self, char * buffer, int len, int millis=-1) -> int

        Parameters:
            buffer: char *
            len: int
            millis: int

        readData(HMTRP self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_hmtrp.HMTRP_readData(self, buffer, len, millis)


    def writeData(self, buffer, len):
        """
        writeData(HMTRP self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_hmtrp.HMTRP_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(HMTRP self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(HMTRP self) -> bool

        Parameters:
            self: upm::HMTRP *

        """
        return _pyupm_hmtrp.HMTRP_setupTty(self, *args)


    def checkOK(self):
        """
        checkOK(HMTRP self) -> bool

        Parameters:
            self: upm::HMTRP *

        """
        return _pyupm_hmtrp.HMTRP_checkOK(self)


    def reset(self):
        """
        reset(HMTRP self) -> bool

        Parameters:
            self: upm::HMTRP *

        """
        return _pyupm_hmtrp.HMTRP_reset(self)


    def getConfig(self, freq, dataRate, rxBandwidth, modulation, txPower, uartBaud):
        """
        getConfig(HMTRP self, uint32_t * freq, uint32_t * dataRate, uint16_t * rxBandwidth, uint8_t * modulation, uint8_t * txPower, uint32_t * uartBaud) -> bool

        Parameters:
            freq: uint32_t *
            dataRate: uint32_t *
            rxBandwidth: uint16_t *
            modulation: uint8_t *
            txPower: uint8_t *
            uartBaud: uint32_t *

        """
        return _pyupm_hmtrp.HMTRP_getConfig(self, freq, dataRate, rxBandwidth, modulation, txPower, uartBaud)


    def setFrequency(self, freq):
        """
        setFrequency(HMTRP self, uint32_t freq) -> bool

        Parameters:
            freq: uint32_t

        """
        return _pyupm_hmtrp.HMTRP_setFrequency(self, freq)


    def setRFDataRate(self, rate):
        """
        setRFDataRate(HMTRP self, uint32_t rate) -> bool

        Parameters:
            rate: uint32_t

        """
        return _pyupm_hmtrp.HMTRP_setRFDataRate(self, rate)


    def setRXBandwidth(self, rxBand):
        """
        setRXBandwidth(HMTRP self, uint16_t rxBand) -> bool

        Parameters:
            rxBand: uint16_t

        """
        return _pyupm_hmtrp.HMTRP_setRXBandwidth(self, rxBand)


    def setFrequencyModulation(self, modulation):
        """
        setFrequencyModulation(HMTRP self, uint8_t modulation) -> bool

        Parameters:
            modulation: uint8_t

        """
        return _pyupm_hmtrp.HMTRP_setFrequencyModulation(self, modulation)


    def setTransmitPower(self, power):
        """
        setTransmitPower(HMTRP self, uint8_t power) -> bool

        Parameters:
            power: uint8_t

        """
        return _pyupm_hmtrp.HMTRP_setTransmitPower(self, power)


    def setUARTSpeed(self, speed):
        """
        setUARTSpeed(HMTRP self, uint32_t speed) -> bool

        Parameters:
            speed: uint32_t

        """
        return _pyupm_hmtrp.HMTRP_setUARTSpeed(self, speed)


    def getRFSignalStrength(self, strength):
        """
        getRFSignalStrength(HMTRP self, uint8_t * strength) -> bool

        Parameters:
            strength: uint8_t *

        """
        return _pyupm_hmtrp.HMTRP_getRFSignalStrength(self, strength)


    def getModSignalStrength(self, strength):
        """
        getModSignalStrength(HMTRP self, uint8_t * strength) -> bool

        Parameters:
            strength: uint8_t *

        """
        return _pyupm_hmtrp.HMTRP_getModSignalStrength(self, strength)

HMTRP_swigregister = _pyupm_hmtrp.HMTRP_swigregister
HMTRP_swigregister(HMTRP)

class charArray(_object):
    """Proxy of C++ charArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        """
        __init__(charArray self, size_t nelements) -> charArray

        Parameters:
            nelements: size_t

        """
        this = _pyupm_hmtrp.new_charArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hmtrp.delete_charArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        """
        __getitem__(charArray self, size_t index) -> char

        Parameters:
            index: size_t

        """
        return _pyupm_hmtrp.charArray___getitem__(self, index)


    def __setitem__(self, index, value):
        """
        __setitem__(charArray self, size_t index, char value)

        Parameters:
            index: size_t
            value: char

        """
        return _pyupm_hmtrp.charArray___setitem__(self, index, value)


    def cast(self):
        """
        cast(charArray self) -> char *

        Parameters:
            self: charArray *

        """
        return _pyupm_hmtrp.charArray_cast(self)


    def frompointer(t):
        """
        frompointer(char * t) -> charArray

        Parameters:
            t: char *

        """
        return _pyupm_hmtrp.charArray_frompointer(t)

    if _newclass:
        frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
charArray_swigregister = _pyupm_hmtrp.charArray_swigregister
charArray_swigregister(charArray)
cvar = _pyupm_hmtrp.cvar

def charArray_frompointer(t):
    """
    charArray_frompointer(char * t) -> charArray

    Parameters:
        t: char *

    """
    return _pyupm_hmtrp.charArray_frompointer(t)

# This file is compatible with both classic and new-style classes.


