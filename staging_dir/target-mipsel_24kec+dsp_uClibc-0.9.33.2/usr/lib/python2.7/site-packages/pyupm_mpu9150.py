# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mpu9150', [dirname(__file__)])
        except ImportError:
            import _pyupm_mpu9150
            return _pyupm_mpu9150
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mpu9150', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mpu9150 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mpu9150
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_floatp():
    """new_floatp() -> float *"""
    return _pyupm_mpu9150.new_floatp()

def copy_floatp(value):
    """
    copy_floatp(float value) -> float *

    Parameters:
        value: float

    """
    return _pyupm_mpu9150.copy_floatp(value)

def delete_floatp(obj):
    """
    delete_floatp(float * obj)

    Parameters:
        obj: float *

    """
    return _pyupm_mpu9150.delete_floatp(obj)

def floatp_assign(obj, value):
    """
    floatp_assign(float * obj, float value)

    Parameters:
        obj: float *
        value: float

    """
    return _pyupm_mpu9150.floatp_assign(obj, value)

def floatp_value(obj):
    """
    floatp_value(float * obj) -> float

    Parameters:
        obj: float *

    """
    return _pyupm_mpu9150.floatp_value(obj)

_pyupm_mpu9150.AK8975_I2C_BUS_swigconstant(_pyupm_mpu9150)
AK8975_I2C_BUS = _pyupm_mpu9150.AK8975_I2C_BUS

_pyupm_mpu9150.AK8975_DEFAULT_I2C_ADDR_swigconstant(_pyupm_mpu9150)
AK8975_DEFAULT_I2C_ADDR = _pyupm_mpu9150.AK8975_DEFAULT_I2C_ADDR
class AK8975(_object):
    """Proxy of C++ upm::AK8975 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK8975, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK8975, name)
    __repr__ = _swig_repr
    REG_WIA = _pyupm_mpu9150.AK8975_REG_WIA
    REG_INFO = _pyupm_mpu9150.AK8975_REG_INFO
    REG_ST1 = _pyupm_mpu9150.AK8975_REG_ST1
    REG_HXL = _pyupm_mpu9150.AK8975_REG_HXL
    REG_HXH = _pyupm_mpu9150.AK8975_REG_HXH
    REG_HYL = _pyupm_mpu9150.AK8975_REG_HYL
    REG_HYH = _pyupm_mpu9150.AK8975_REG_HYH
    REG_HZL = _pyupm_mpu9150.AK8975_REG_HZL
    REG_HZH = _pyupm_mpu9150.AK8975_REG_HZH
    REG_ST2 = _pyupm_mpu9150.AK8975_REG_ST2
    REG_CNTL = _pyupm_mpu9150.AK8975_REG_CNTL
    REG_ASTC = _pyupm_mpu9150.AK8975_REG_ASTC
    REG_ASAX = _pyupm_mpu9150.AK8975_REG_ASAX
    REG_ASAY = _pyupm_mpu9150.AK8975_REG_ASAY
    REG_ASAZ = _pyupm_mpu9150.AK8975_REG_ASAZ
    ST1_DRDY = _pyupm_mpu9150.AK8975_ST1_DRDY
    ST2_DERR = _pyupm_mpu9150.AK8975_ST2_DERR
    ST2_HOFL = _pyupm_mpu9150.AK8975_ST2_HOFL
    CNTL_PWRDWN = _pyupm_mpu9150.AK8975_CNTL_PWRDWN
    CNTL_MEASURE = _pyupm_mpu9150.AK8975_CNTL_MEASURE
    CNTL_SELFTEST = _pyupm_mpu9150.AK8975_CNTL_SELFTEST
    CNTL_FUSE_ACCESS = _pyupm_mpu9150.AK8975_CNTL_FUSE_ACCESS
    ASTC_SELF = _pyupm_mpu9150.AK8975_ASTC_SELF

    def __init__(self, bus=0, address=0x0c):
        """
        __init__(upm::AK8975 self, int bus=0, uint8_t address=0x0c) -> AK8975

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::AK8975 self, int bus=0) -> AK8975

        Parameters:
            bus: int

        __init__(upm::AK8975 self) -> AK8975
        """
        this = _pyupm_mpu9150.new_AK8975(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_AK8975
    __del__ = lambda self: None

    def init(self):
        """
        init(AK8975 self) -> bool

        Parameters:
            self: upm::AK8975 *

        """
        return _pyupm_mpu9150.AK8975_init(self)


    def setMode(self, mode):
        """
        setMode(AK8975 self, upm::AK8975::CNTL_MODES_T mode) -> bool

        Parameters:
            mode: enum upm::AK8975::CNTL_MODES_T

        """
        return _pyupm_mpu9150.AK8975_setMode(self, mode)


    def isReady(self):
        """
        isReady(AK8975 self) -> bool

        Parameters:
            self: upm::AK8975 *

        """
        return _pyupm_mpu9150.AK8975_isReady(self)


    def waitforDeviceReady(self):
        """
        waitforDeviceReady(AK8975 self) -> bool

        Parameters:
            self: upm::AK8975 *

        """
        return _pyupm_mpu9150.AK8975_waitforDeviceReady(self)


    def update(self, selfTest=False):
        """
        update(AK8975 self, bool selfTest=False) -> bool

        Parameters:
            selfTest: bool

        update(AK8975 self) -> bool

        Parameters:
            self: upm::AK8975 *

        """
        return _pyupm_mpu9150.AK8975_update(self, selfTest)


    def selfTest(self):
        """
        selfTest(AK8975 self) -> bool

        Parameters:
            self: upm::AK8975 *

        """
        return _pyupm_mpu9150.AK8975_selfTest(self)


    def getMagnetometer(self, x, y, z):
        """
        getMagnetometer(AK8975 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *

        """
        return _pyupm_mpu9150.AK8975_getMagnetometer(self, x, y, z)

AK8975_swigregister = _pyupm_mpu9150.AK8975_swigregister
AK8975_swigregister(AK8975)


_pyupm_mpu9150.MPU60X0_I2C_BUS_swigconstant(_pyupm_mpu9150)
MPU60X0_I2C_BUS = _pyupm_mpu9150.MPU60X0_I2C_BUS

_pyupm_mpu9150.MPU60X0_DEFAULT_I2C_ADDR_swigconstant(_pyupm_mpu9150)
MPU60X0_DEFAULT_I2C_ADDR = _pyupm_mpu9150.MPU60X0_DEFAULT_I2C_ADDR
class MPU60X0(_object):
    """Proxy of C++ upm::MPU60X0 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPU60X0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPU60X0, name)
    __repr__ = _swig_repr
    REG_SELF_TEST_X = _pyupm_mpu9150.MPU60X0_REG_SELF_TEST_X
    REG_SELF_TEST_Y = _pyupm_mpu9150.MPU60X0_REG_SELF_TEST_Y
    REG_SELF_TEST_Z = _pyupm_mpu9150.MPU60X0_REG_SELF_TEST_Z
    REG_SELF_TEST_A = _pyupm_mpu9150.MPU60X0_REG_SELF_TEST_A
    REG_SMPLRT_DIV = _pyupm_mpu9150.MPU60X0_REG_SMPLRT_DIV
    REG_CONFIG = _pyupm_mpu9150.MPU60X0_REG_CONFIG
    REG_GYRO_CONFIG = _pyupm_mpu9150.MPU60X0_REG_GYRO_CONFIG
    REG_ACCEL_CONFIG = _pyupm_mpu9150.MPU60X0_REG_ACCEL_CONFIG
    REG_FF_THR = _pyupm_mpu9150.MPU60X0_REG_FF_THR
    REG_FF_DUR = _pyupm_mpu9150.MPU60X0_REG_FF_DUR
    REG_MOT_THR = _pyupm_mpu9150.MPU60X0_REG_MOT_THR
    REG_MOT_DUR = _pyupm_mpu9150.MPU60X0_REG_MOT_DUR
    REG_ZRMOT_THR = _pyupm_mpu9150.MPU60X0_REG_ZRMOT_THR
    REG_ZRMOT_DUR = _pyupm_mpu9150.MPU60X0_REG_ZRMOT_DUR
    REG_FIFO_EN = _pyupm_mpu9150.MPU60X0_REG_FIFO_EN
    REG_I2C_MST_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_MST_CTRL
    REG_I2C_SLV0_ADDR = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV0_ADDR
    REG_I2C_SLV0_REG = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV0_REG
    REG_I2C_SLV0_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV0_CTRL
    REG_I2C_SLV1_ADDR = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV1_ADDR
    REG_I2C_SLV1_REG = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV1_REG
    REG_I2C_SLV1_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV1_CTRL
    REG_I2C_SLV2_ADDR = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV2_ADDR
    REG_I2C_SLV2_REG = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV2_REG
    REG_I2C_SLV2_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV2_CTRL
    REG_I2C_SLV3_ADDR = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV3_ADDR
    REG_I2C_SLV3_REG = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV3_REG
    REG_I2C_SLV3_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV3_CTRL
    REG_I2C_SLV4_ADDR = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV4_ADDR
    REG_I2C_SLV4_REG = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV4_REG
    REG_I2C_SLV4_DO = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV4_DO
    REG_I2C_SLV4_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV4_CTRL
    REG_I2C_SLV4_DI = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV4_DI
    REG_I2C_MST_STATUS = _pyupm_mpu9150.MPU60X0_REG_I2C_MST_STATUS
    REG_INT_PIN_CFG = _pyupm_mpu9150.MPU60X0_REG_INT_PIN_CFG
    REG_INT_ENABLE = _pyupm_mpu9150.MPU60X0_REG_INT_ENABLE
    REG_INT_STATUS = _pyupm_mpu9150.MPU60X0_REG_INT_STATUS
    REG_ACCEL_XOUT_H = _pyupm_mpu9150.MPU60X0_REG_ACCEL_XOUT_H
    REG_ACCEL_XOUT_L = _pyupm_mpu9150.MPU60X0_REG_ACCEL_XOUT_L
    REG_ACCEL_YOUT_H = _pyupm_mpu9150.MPU60X0_REG_ACCEL_YOUT_H
    REG_ACCEL_YOUT_L = _pyupm_mpu9150.MPU60X0_REG_ACCEL_YOUT_L
    REG_ACCEL_ZOUT_H = _pyupm_mpu9150.MPU60X0_REG_ACCEL_ZOUT_H
    REG_ACCEL_ZOUT_L = _pyupm_mpu9150.MPU60X0_REG_ACCEL_ZOUT_L
    REG_TEMP_OUT_H = _pyupm_mpu9150.MPU60X0_REG_TEMP_OUT_H
    REG_TEMP_OUT_L = _pyupm_mpu9150.MPU60X0_REG_TEMP_OUT_L
    REG_GYRO_XOUT_H = _pyupm_mpu9150.MPU60X0_REG_GYRO_XOUT_H
    REG_GYRO_XOUT_L = _pyupm_mpu9150.MPU60X0_REG_GYRO_XOUT_L
    REG_GYRO_YOUT_H = _pyupm_mpu9150.MPU60X0_REG_GYRO_YOUT_H
    REG_GYRO_YOUT_L = _pyupm_mpu9150.MPU60X0_REG_GYRO_YOUT_L
    REG_GYRO_ZOUT_H = _pyupm_mpu9150.MPU60X0_REG_GYRO_ZOUT_H
    REG_GYRO_ZOUT_L = _pyupm_mpu9150.MPU60X0_REG_GYRO_ZOUT_L
    REG_EXT_SENS_DATA_00 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_00
    REG_EXT_SENS_DATA_01 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_01
    REG_EXT_SENS_DATA_02 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_02
    REG_EXT_SENS_DATA_03 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_03
    REG_EXT_SENS_DATA_04 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_04
    REG_EXT_SENS_DATA_05 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_05
    REG_EXT_SENS_DATA_06 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_06
    REG_EXT_SENS_DATA_07 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_07
    REG_EXT_SENS_DATA_08 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_08
    REG_EXT_SENS_DATA_09 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_09
    REG_EXT_SENS_DATA_10 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_10
    REG_EXT_SENS_DATA_11 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_11
    REG_EXT_SENS_DATA_12 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_12
    REG_EXT_SENS_DATA_13 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_13
    REG_EXT_SENS_DATA_14 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_14
    REG_EXT_SENS_DATA_15 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_15
    REG_EXT_SENS_DATA_16 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_16
    REG_EXT_SENS_DATA_17 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_17
    REG_EXT_SENS_DATA_18 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_18
    REG_EXT_SENS_DATA_19 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_19
    REG_EXT_SENS_DATA_20 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_20
    REG_EXT_SENS_DATA_21 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_21
    REG_EXT_SENS_DATA_22 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_22
    REG_EXT_SENS_DATA_23 = _pyupm_mpu9150.MPU60X0_REG_EXT_SENS_DATA_23
    REG_MOT_DETECT_STATUS = _pyupm_mpu9150.MPU60X0_REG_MOT_DETECT_STATUS
    REG_I2C_SLV0_DO = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV0_DO
    REG_I2C_SLV1_DO = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV1_DO
    REG_I2C_SLV2_DO = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV2_DO
    REG_I2C_SLV3_DO = _pyupm_mpu9150.MPU60X0_REG_I2C_SLV3_DO
    REG_I2C_MST_DELAY_CTRL = _pyupm_mpu9150.MPU60X0_REG_I2C_MST_DELAY_CTRL
    REG_SIGNAL_PATH_RESET = _pyupm_mpu9150.MPU60X0_REG_SIGNAL_PATH_RESET
    REG_MOT_DETECT_CTRL = _pyupm_mpu9150.MPU60X0_REG_MOT_DETECT_CTRL
    REG_USER_CTRL = _pyupm_mpu9150.MPU60X0_REG_USER_CTRL
    REG_PWR_MGMT_1 = _pyupm_mpu9150.MPU60X0_REG_PWR_MGMT_1
    REG_PWR_MGMT_2 = _pyupm_mpu9150.MPU60X0_REG_PWR_MGMT_2
    REG_FIFO_COUNTH = _pyupm_mpu9150.MPU60X0_REG_FIFO_COUNTH
    REG_FIFO_COUNTL = _pyupm_mpu9150.MPU60X0_REG_FIFO_COUNTL
    REG_FIFO_R_W = _pyupm_mpu9150.MPU60X0_REG_FIFO_R_W
    REG_WHO_AM_I = _pyupm_mpu9150.MPU60X0_REG_WHO_AM_I
    CONFIG_DLPF_CFG0 = _pyupm_mpu9150.MPU60X0_CONFIG_DLPF_CFG0
    CONFIG_DLPF_CFG1 = _pyupm_mpu9150.MPU60X0_CONFIG_DLPF_CFG1
    CONFIG_DLPF_CFG2 = _pyupm_mpu9150.MPU60X0_CONFIG_DLPF_CFG2
    _CONFIG_DLPF_SHIFT = _pyupm_mpu9150.MPU60X0__CONFIG_DLPF_SHIFT
    _CONFIG_DLPF_MASK = _pyupm_mpu9150.MPU60X0__CONFIG_DLPF_MASK
    CONFIG_EXT_SYNC_SET0 = _pyupm_mpu9150.MPU60X0_CONFIG_EXT_SYNC_SET0
    CONFIG_EXT_SYNC_SET1 = _pyupm_mpu9150.MPU60X0_CONFIG_EXT_SYNC_SET1
    CONFIG_EXT_SYNC_SET2 = _pyupm_mpu9150.MPU60X0_CONFIG_EXT_SYNC_SET2
    _CONFIG_EXT_SYNC_SET_SHIFT = _pyupm_mpu9150.MPU60X0__CONFIG_EXT_SYNC_SET_SHIFT
    _CONFIG_EXT_SYNC_SET_MASK = _pyupm_mpu9150.MPU60X0__CONFIG_EXT_SYNC_SET_MASK
    DLPF_260_256 = _pyupm_mpu9150.MPU60X0_DLPF_260_256
    DLPF_184_188 = _pyupm_mpu9150.MPU60X0_DLPF_184_188
    DLPF_94_98 = _pyupm_mpu9150.MPU60X0_DLPF_94_98
    DLPF_44_42 = _pyupm_mpu9150.MPU60X0_DLPF_44_42
    DLPF_21_20 = _pyupm_mpu9150.MPU60X0_DLPF_21_20
    DLPF_10_10 = _pyupm_mpu9150.MPU60X0_DLPF_10_10
    DLPF_5_5 = _pyupm_mpu9150.MPU60X0_DLPF_5_5
    DLPF_RESERVED = _pyupm_mpu9150.MPU60X0_DLPF_RESERVED
    EXT_SYNC_DISABLED = _pyupm_mpu9150.MPU60X0_EXT_SYNC_DISABLED
    EXT_SYNC_TEMP_OUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_TEMP_OUT
    EXT_SYNC_GYRO_XOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_GYRO_XOUT
    EXT_SYNC_GYRO_YOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_GYRO_YOUT
    EXT_SYNC_GYRO_ZOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_GYRO_ZOUT
    EXT_SYNC_ACCEL_XOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_ACCEL_XOUT
    EXT_SYNC_ACCEL_YOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_ACCEL_YOUT
    EXT_SYNC_ACCEL_ZOUT = _pyupm_mpu9150.MPU60X0_EXT_SYNC_ACCEL_ZOUT
    FS_SEL0 = _pyupm_mpu9150.MPU60X0_FS_SEL0
    FS_SEL1 = _pyupm_mpu9150.MPU60X0_FS_SEL1
    _FS_SEL_SHIFT = _pyupm_mpu9150.MPU60X0__FS_SEL_SHIFT
    _FS_SEL_MASK = _pyupm_mpu9150.MPU60X0__FS_SEL_MASK
    ZG_ST = _pyupm_mpu9150.MPU60X0_ZG_ST
    YG_ST = _pyupm_mpu9150.MPU60X0_YG_ST
    XG_ST = _pyupm_mpu9150.MPU60X0_XG_ST
    FS_250 = _pyupm_mpu9150.MPU60X0_FS_250
    FS_500 = _pyupm_mpu9150.MPU60X0_FS_500
    FS_1000 = _pyupm_mpu9150.MPU60X0_FS_1000
    FS_2000 = _pyupm_mpu9150.MPU60X0_FS_2000
    AFS_SEL0 = _pyupm_mpu9150.MPU60X0_AFS_SEL0
    AFS_SEL1 = _pyupm_mpu9150.MPU60X0_AFS_SEL1
    _AFS_SEL_SHIFT = _pyupm_mpu9150.MPU60X0__AFS_SEL_SHIFT
    _AFS_SEL_MASK = _pyupm_mpu9150.MPU60X0__AFS_SEL_MASK
    ZA_ST = _pyupm_mpu9150.MPU60X0_ZA_ST
    YA_ST = _pyupm_mpu9150.MPU60X0_YA_ST
    XA_ST = _pyupm_mpu9150.MPU60X0_XA_ST
    AFS_2 = _pyupm_mpu9150.MPU60X0_AFS_2
    AFS_4 = _pyupm_mpu9150.MPU60X0_AFS_4
    AFS_8 = _pyupm_mpu9150.MPU60X0_AFS_8
    AFS_16 = _pyupm_mpu9150.MPU60X0_AFS_16
    SLV0_FIFO_EN = _pyupm_mpu9150.MPU60X0_SLV0_FIFO_EN
    SLV1_FIFO_EN = _pyupm_mpu9150.MPU60X0_SLV1_FIFO_EN
    SLV2_FIFO_EN = _pyupm_mpu9150.MPU60X0_SLV2_FIFO_EN
    ACCEL_FIFO_EN = _pyupm_mpu9150.MPU60X0_ACCEL_FIFO_EN
    ZG_FIFO_EN = _pyupm_mpu9150.MPU60X0_ZG_FIFO_EN
    YG_FIFO_EN = _pyupm_mpu9150.MPU60X0_YG_FIFO_EN
    XG_FIFO_EN = _pyupm_mpu9150.MPU60X0_XG_FIFO_EN
    TEMP_FIFO_EN = _pyupm_mpu9150.MPU60X0_TEMP_FIFO_EN
    I2C_MST_CLK0 = _pyupm_mpu9150.MPU60X0_I2C_MST_CLK0
    I2C_MST_CLK1 = _pyupm_mpu9150.MPU60X0_I2C_MST_CLK1
    I2C_MST_CLK2 = _pyupm_mpu9150.MPU60X0_I2C_MST_CLK2
    I2C_MST_CLK3 = _pyupm_mpu9150.MPU60X0_I2C_MST_CLK3
    _I2C_MST_CLK_SHIFT = _pyupm_mpu9150.MPU60X0__I2C_MST_CLK_SHIFT
    _I2C_MST_CLK_MASK = _pyupm_mpu9150.MPU60X0__I2C_MST_CLK_MASK
    I2C_MST_P_NSR = _pyupm_mpu9150.MPU60X0_I2C_MST_P_NSR
    SLV_3_FIFO_EN = _pyupm_mpu9150.MPU60X0_SLV_3_FIFO_EN
    WAIT_FOR_ES = _pyupm_mpu9150.MPU60X0_WAIT_FOR_ES
    MULT_MST_EN = _pyupm_mpu9150.MPU60X0_MULT_MST_EN
    MST_CLK_348 = _pyupm_mpu9150.MPU60X0_MST_CLK_348
    MST_CLK_333 = _pyupm_mpu9150.MPU60X0_MST_CLK_333
    MST_CLK_320 = _pyupm_mpu9150.MPU60X0_MST_CLK_320
    MST_CLK_308 = _pyupm_mpu9150.MPU60X0_MST_CLK_308
    MST_CLK_296 = _pyupm_mpu9150.MPU60X0_MST_CLK_296
    MST_CLK_286 = _pyupm_mpu9150.MPU60X0_MST_CLK_286
    MST_CLK_276 = _pyupm_mpu9150.MPU60X0_MST_CLK_276
    MST_CLK_267 = _pyupm_mpu9150.MPU60X0_MST_CLK_267
    MST_CLK_258 = _pyupm_mpu9150.MPU60X0_MST_CLK_258
    MST_CLK_500 = _pyupm_mpu9150.MPU60X0_MST_CLK_500
    MST_CLK_471 = _pyupm_mpu9150.MPU60X0_MST_CLK_471
    MST_CLK_444 = _pyupm_mpu9150.MPU60X0_MST_CLK_444
    MST_CLK_421 = _pyupm_mpu9150.MPU60X0_MST_CLK_421
    MST_CLK_400 = _pyupm_mpu9150.MPU60X0_MST_CLK_400
    MST_CLK_381 = _pyupm_mpu9150.MPU60X0_MST_CLK_381
    MST_CLK_364 = _pyupm_mpu9150.MPU60X0_MST_CLK_364
    I2C_SLV_ADDR0 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR0
    I2C_SLV_ADDR1 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR1
    I2C_SLV_ADDR2 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR2
    I2C_SLV_ADDR3 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR3
    I2C_SLV_ADDR4 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR4
    I2C_SLV_ADDR5 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR5
    I2C_SLV_ADDR6 = _pyupm_mpu9150.MPU60X0_I2C_SLV_ADDR6
    _I2C_SLV_ADDR_SHIFT = _pyupm_mpu9150.MPU60X0__I2C_SLV_ADDR_SHIFT
    _I2C_SLV_ADDR_MASK = _pyupm_mpu9150.MPU60X0__I2C_SLV_ADDR_MASK
    I2C_SLV_RW = _pyupm_mpu9150.MPU60X0_I2C_SLV_RW
    I2C_SLV_LEN0 = _pyupm_mpu9150.MPU60X0_I2C_SLV_LEN0
    I2C_SLV_LEN1 = _pyupm_mpu9150.MPU60X0_I2C_SLV_LEN1
    I2C_SLV_LEN2 = _pyupm_mpu9150.MPU60X0_I2C_SLV_LEN2
    I2C_SLV_LEN3 = _pyupm_mpu9150.MPU60X0_I2C_SLV_LEN3
    _I2C_SLV_LEN_SHIFT = _pyupm_mpu9150.MPU60X0__I2C_SLV_LEN_SHIFT
    _I2C_SLV_LEN_MASK = _pyupm_mpu9150.MPU60X0__I2C_SLV_LEN_MASK
    I2C_SLV_GRP = _pyupm_mpu9150.MPU60X0_I2C_SLV_GRP
    I2C_SLV_REG_DIS = _pyupm_mpu9150.MPU60X0_I2C_SLV_REG_DIS
    I2C_SLV_BYTE_SW = _pyupm_mpu9150.MPU60X0_I2C_SLV_BYTE_SW
    I2C_SLV_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV_EN
    I2C_MST_DLY0 = _pyupm_mpu9150.MPU60X0_I2C_MST_DLY0
    I2C_MST_DLY1 = _pyupm_mpu9150.MPU60X0_I2C_MST_DLY1
    I2C_MST_DLY2 = _pyupm_mpu9150.MPU60X0_I2C_MST_DLY2
    I2C_MST_DLY3 = _pyupm_mpu9150.MPU60X0_I2C_MST_DLY3
    I2C_MST_DLY4 = _pyupm_mpu9150.MPU60X0_I2C_MST_DLY4
    _I2C_MST_DLY_SHIFT = _pyupm_mpu9150.MPU60X0__I2C_MST_DLY_SHIFT
    _I2C_MST_DLY_MASK = _pyupm_mpu9150.MPU60X0__I2C_MST_DLY_MASK
    I2C_SLV4_REG_DIS = _pyupm_mpu9150.MPU60X0_I2C_SLV4_REG_DIS
    I2C_SLV4_INT_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV4_INT_EN
    I2C_SLV4_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV4_EN
    I2C_SLV0_NACK = _pyupm_mpu9150.MPU60X0_I2C_SLV0_NACK
    I2C_SLV1_NACK = _pyupm_mpu9150.MPU60X0_I2C_SLV1_NACK
    I2C_SLV2_NACK = _pyupm_mpu9150.MPU60X0_I2C_SLV2_NACK
    I2C_SLV3_NACK = _pyupm_mpu9150.MPU60X0_I2C_SLV3_NACK
    I2C_SLV4_NACK = _pyupm_mpu9150.MPU60X0_I2C_SLV4_NACK
    I2C_LOST_ARB = _pyupm_mpu9150.MPU60X0_I2C_LOST_ARB
    I2C_SLV4_DONE = _pyupm_mpu9150.MPU60X0_I2C_SLV4_DONE
    PASS_THROUGH = _pyupm_mpu9150.MPU60X0_PASS_THROUGH
    CLKOUT_EN = _pyupm_mpu9150.MPU60X0_CLKOUT_EN
    I2C_BYPASS_ENABLE = _pyupm_mpu9150.MPU60X0_I2C_BYPASS_ENABLE
    FSYNC_INT_EN = _pyupm_mpu9150.MPU60X0_FSYNC_INT_EN
    FSYNC_INT_LEVEL = _pyupm_mpu9150.MPU60X0_FSYNC_INT_LEVEL
    INT_RD_CLEAR = _pyupm_mpu9150.MPU60X0_INT_RD_CLEAR
    LATCH_INT_EN = _pyupm_mpu9150.MPU60X0_LATCH_INT_EN
    INT_OPEN = _pyupm_mpu9150.MPU60X0_INT_OPEN
    INT_LEVEL = _pyupm_mpu9150.MPU60X0_INT_LEVEL
    DATA_RDY_EN = _pyupm_mpu9150.MPU60X0_DATA_RDY_EN
    I2C_MST_INT_EN = _pyupm_mpu9150.MPU60X0_I2C_MST_INT_EN
    FIFO_OFLOW_EN = _pyupm_mpu9150.MPU60X0_FIFO_OFLOW_EN
    ZMOT_EN = _pyupm_mpu9150.MPU60X0_ZMOT_EN
    MOT_EN = _pyupm_mpu9150.MPU60X0_MOT_EN
    FF_EN = _pyupm_mpu9150.MPU60X0_FF_EN
    DATA_RDY_INT = _pyupm_mpu9150.MPU60X0_DATA_RDY_INT
    I2C_MST_INT = _pyupm_mpu9150.MPU60X0_I2C_MST_INT
    FIFO_OFLOW_INT = _pyupm_mpu9150.MPU60X0_FIFO_OFLOW_INT
    ZMOT_INT = _pyupm_mpu9150.MPU60X0_ZMOT_INT
    MOT_INT = _pyupm_mpu9150.MPU60X0_MOT_INT
    FF_INT = _pyupm_mpu9150.MPU60X0_FF_INT
    MOT_ZRMOT = _pyupm_mpu9150.MPU60X0_MOT_ZRMOT
    MOT_ZPOS = _pyupm_mpu9150.MPU60X0_MOT_ZPOS
    MOT_ZNEG = _pyupm_mpu9150.MPU60X0_MOT_ZNEG
    MOT_YPOS = _pyupm_mpu9150.MPU60X0_MOT_YPOS
    MOT_YNEG = _pyupm_mpu9150.MPU60X0_MOT_YNEG
    MOT_XPOS = _pyupm_mpu9150.MPU60X0_MOT_XPOS
    MOT_XNEG = _pyupm_mpu9150.MPU60X0_MOT_XNEG
    I2C_SLV0_DLY_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV0_DLY_EN
    I2C_SLV1_DLY_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV1_DLY_EN
    I2C_SLV2_DLY_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV2_DLY_EN
    I2C_SLV3_DLY_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV3_DLY_EN
    I2C_SLV4_DLY_EN = _pyupm_mpu9150.MPU60X0_I2C_SLV4_DLY_EN
    DELAY_ES_SHADOW = _pyupm_mpu9150.MPU60X0_DELAY_ES_SHADOW
    TEMP_RESET = _pyupm_mpu9150.MPU60X0_TEMP_RESET
    ACCEL_RESET = _pyupm_mpu9150.MPU60X0_ACCEL_RESET
    GYRO_RESET = _pyupm_mpu9150.MPU60X0_GYRO_RESET
    MOT_COUNT0 = _pyupm_mpu9150.MPU60X0_MOT_COUNT0
    MOT_COUNT1 = _pyupm_mpu9150.MPU60X0_MOT_COUNT1
    _MOT_COUNT_SHIFT = _pyupm_mpu9150.MPU60X0__MOT_COUNT_SHIFT
    _MOT_COUNT_MASK = _pyupm_mpu9150.MPU60X0__MOT_COUNT_MASK
    FF_COUNT0 = _pyupm_mpu9150.MPU60X0_FF_COUNT0
    FF_COUNT1 = _pyupm_mpu9150.MPU60X0_FF_COUNT1
    _FF_COUNT_SHIFT = _pyupm_mpu9150.MPU60X0__FF_COUNT_SHIFT
    _FF_COUNT_MASK = _pyupm_mpu9150.MPU60X0__FF_COUNT_MASK
    ACCEL_ON_DELAY0 = _pyupm_mpu9150.MPU60X0_ACCEL_ON_DELAY0
    ACCEL_ON_DELAY1 = _pyupm_mpu9150.MPU60X0_ACCEL_ON_DELAY1
    _ACCEL_ON_DELAY_SHIFT = _pyupm_mpu9150.MPU60X0__ACCEL_ON_DELAY_SHIFT
    _ACCEL_ON_DELAY_MASK = _pyupm_mpu9150.MPU60X0__ACCEL_ON_DELAY_MASK
    COUNT_0 = _pyupm_mpu9150.MPU60X0_COUNT_0
    COUNT_1 = _pyupm_mpu9150.MPU60X0_COUNT_1
    COUNT_2 = _pyupm_mpu9150.MPU60X0_COUNT_2
    COUNT_4 = _pyupm_mpu9150.MPU60X0_COUNT_4
    ON_DELAY_0 = _pyupm_mpu9150.MPU60X0_ON_DELAY_0
    ON_DELAY_1 = _pyupm_mpu9150.MPU60X0_ON_DELAY_1
    ON_DELAY_2 = _pyupm_mpu9150.MPU60X0_ON_DELAY_2
    ON_DELAY_3 = _pyupm_mpu9150.MPU60X0_ON_DELAY_3
    SIG_COND_RESET = _pyupm_mpu9150.MPU60X0_SIG_COND_RESET
    I2C_MST_RESET = _pyupm_mpu9150.MPU60X0_I2C_MST_RESET
    FIFO_RESET = _pyupm_mpu9150.MPU60X0_FIFO_RESET
    I2C_IF_DIS = _pyupm_mpu9150.MPU60X0_I2C_IF_DIS
    I2C_MST_EN = _pyupm_mpu9150.MPU60X0_I2C_MST_EN
    FIFO_EN = _pyupm_mpu9150.MPU60X0_FIFO_EN
    CLKSEL0 = _pyupm_mpu9150.MPU60X0_CLKSEL0
    CLKSEL1 = _pyupm_mpu9150.MPU60X0_CLKSEL1
    CLKSEL2 = _pyupm_mpu9150.MPU60X0_CLKSEL2
    _CLKSEL_SHIFT = _pyupm_mpu9150.MPU60X0__CLKSEL_SHIFT
    _CLKSEL_MASK = _pyupm_mpu9150.MPU60X0__CLKSEL_MASK
    TEMP_DIS = _pyupm_mpu9150.MPU60X0_TEMP_DIS
    PWR_CYCLE = _pyupm_mpu9150.MPU60X0_PWR_CYCLE
    PWR_SLEEP = _pyupm_mpu9150.MPU60X0_PWR_SLEEP
    DEVICE_RESET = _pyupm_mpu9150.MPU60X0_DEVICE_RESET
    INT_8MHZ = _pyupm_mpu9150.MPU60X0_INT_8MHZ
    PLL_XG = _pyupm_mpu9150.MPU60X0_PLL_XG
    PLL_YG = _pyupm_mpu9150.MPU60X0_PLL_YG
    PLL_ZG = _pyupm_mpu9150.MPU60X0_PLL_ZG
    PLL_EXT_32KHZ = _pyupm_mpu9150.MPU60X0_PLL_EXT_32KHZ
    PLL_EXT_19MHZ = _pyupm_mpu9150.MPU60X0_PLL_EXT_19MHZ
    CLK_STOP = _pyupm_mpu9150.MPU60X0_CLK_STOP
    STBY_ZG = _pyupm_mpu9150.MPU60X0_STBY_ZG
    STBY_YG = _pyupm_mpu9150.MPU60X0_STBY_YG
    STBY_XG = _pyupm_mpu9150.MPU60X0_STBY_XG
    STBY_ZA = _pyupm_mpu9150.MPU60X0_STBY_ZA
    STBY_YA = _pyupm_mpu9150.MPU60X0_STBY_YA
    STBY_XA = _pyupm_mpu9150.MPU60X0_STBY_XA
    LP_WAKE_CTRL0 = _pyupm_mpu9150.MPU60X0_LP_WAKE_CTRL0
    LP_WAKE_CTRL1 = _pyupm_mpu9150.MPU60X0_LP_WAKE_CTRL1
    _LP_WAKE_CTRL_SHIFT = _pyupm_mpu9150.MPU60X0__LP_WAKE_CTRL_SHIFT
    _LP_WAKE_CTRL_MASK = _pyupm_mpu9150.MPU60X0__LP_WAKE_CTRL_MASK
    LP_WAKE_1_25 = _pyupm_mpu9150.MPU60X0_LP_WAKE_1_25
    LP_WAKE_5 = _pyupm_mpu9150.MPU60X0_LP_WAKE_5
    LP_WAKE_20 = _pyupm_mpu9150.MPU60X0_LP_WAKE_20
    LP_WAKE_40 = _pyupm_mpu9150.MPU60X0_LP_WAKE_40

    def __init__(self, bus=0, address=0x68):
        """
        __init__(upm::MPU60X0 self, int bus=0, uint8_t address=0x68) -> MPU60X0

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::MPU60X0 self, int bus=0) -> MPU60X0

        Parameters:
            bus: int

        __init__(upm::MPU60X0 self) -> MPU60X0
        """
        this = _pyupm_mpu9150.new_MPU60X0(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_MPU60X0
    __del__ = lambda self: None

    def init(self):
        """
        init(MPU60X0 self) -> bool

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_init(self)


    def update(self):
        """
        update(MPU60X0 self)

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_update(self)


    def readReg(self, reg):
        """
        readReg(MPU60X0 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_readReg(self, reg)


    def readRegs(self, reg, buffer, len):
        """
        readRegs(MPU60X0 self, uint8_t reg, uint8_t * buffer, int len)

        Parameters:
            reg: uint8_t
            buffer: uint8_t *
            len: int

        """
        return _pyupm_mpu9150.MPU60X0_readRegs(self, reg, buffer, len)


    def writeReg(self, reg, val):
        """
        writeReg(MPU60X0 self, uint8_t reg, uint8_t val) -> bool

        Parameters:
            reg: uint8_t
            val: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_writeReg(self, reg, val)


    def setSleep(self, enable):
        """
        setSleep(MPU60X0 self, bool enable) -> bool

        Parameters:
            enable: bool

        """
        return _pyupm_mpu9150.MPU60X0_setSleep(self, enable)


    def setClockSource(self, clk):
        """
        setClockSource(MPU60X0 self, upm::MPU60X0::CLKSEL_T clk) -> bool

        Parameters:
            clk: enum upm::MPU60X0::CLKSEL_T

        """
        return _pyupm_mpu9150.MPU60X0_setClockSource(self, clk)


    def setGyroscopeScale(self, scale):
        """
        setGyroscopeScale(MPU60X0 self, upm::MPU60X0::FS_SEL_T scale) -> bool

        Parameters:
            scale: enum upm::MPU60X0::FS_SEL_T

        """
        return _pyupm_mpu9150.MPU60X0_setGyroscopeScale(self, scale)


    def setAccelerometerScale(self, scale):
        """
        setAccelerometerScale(MPU60X0 self, upm::MPU60X0::AFS_SEL_T scale) -> bool

        Parameters:
            scale: enum upm::MPU60X0::AFS_SEL_T

        """
        return _pyupm_mpu9150.MPU60X0_setAccelerometerScale(self, scale)


    def setDigitalLowPassFilter(self, dlp):
        """
        setDigitalLowPassFilter(MPU60X0 self, upm::MPU60X0::DLPF_CFG_T dlp) -> bool

        Parameters:
            dlp: enum upm::MPU60X0::DLPF_CFG_T

        """
        return _pyupm_mpu9150.MPU60X0_setDigitalLowPassFilter(self, dlp)


    def setSampleRateDivider(self, div):
        """
        setSampleRateDivider(MPU60X0 self, uint8_t div) -> bool

        Parameters:
            div: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_setSampleRateDivider(self, div)


    def getSampleRateDivider(self):
        """
        getSampleRateDivider(MPU60X0 self) -> uint8_t

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_getSampleRateDivider(self)


    def getAccelerometer(self, x, y, z):
        """
        getAccelerometer(MPU60X0 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *

        """
        return _pyupm_mpu9150.MPU60X0_getAccelerometer(self, x, y, z)


    def getGyroscope(self, x, y, z):
        """
        getGyroscope(MPU60X0 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *

        """
        return _pyupm_mpu9150.MPU60X0_getGyroscope(self, x, y, z)


    def getTemperature(self):
        """
        getTemperature(MPU60X0 self) -> float

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_getTemperature(self)


    def enableTemperatureSensor(self, enable):
        """
        enableTemperatureSensor(MPU60X0 self, bool enable) -> bool

        Parameters:
            enable: bool

        """
        return _pyupm_mpu9150.MPU60X0_enableTemperatureSensor(self, enable)


    def setExternalSync(self, val):
        """
        setExternalSync(MPU60X0 self, upm::MPU60X0::EXT_SYNC_SET_T val) -> bool

        Parameters:
            val: enum upm::MPU60X0::EXT_SYNC_SET_T

        """
        return _pyupm_mpu9150.MPU60X0_setExternalSync(self, val)


    def enableI2CBypass(self, enable):
        """
        enableI2CBypass(MPU60X0 self, bool enable) -> bool

        Parameters:
            enable: bool

        """
        return _pyupm_mpu9150.MPU60X0_enableI2CBypass(self, enable)


    def setMotionDetectionThreshold(self, thr):
        """
        setMotionDetectionThreshold(MPU60X0 self, uint8_t thr) -> bool

        Parameters:
            thr: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_setMotionDetectionThreshold(self, thr)


    def getInterruptStatus(self):
        """
        getInterruptStatus(MPU60X0 self) -> uint8_t

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_getInterruptStatus(self)


    def setInterruptEnables(self, enables):
        """
        setInterruptEnables(MPU60X0 self, uint8_t enables) -> bool

        Parameters:
            enables: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_setInterruptEnables(self, enables)


    def getInterruptEnables(self):
        """
        getInterruptEnables(MPU60X0 self) -> uint8_t

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_getInterruptEnables(self)


    def setInterruptPinConfig(self, cfg):
        """
        setInterruptPinConfig(MPU60X0 self, uint8_t cfg) -> bool

        Parameters:
            cfg: uint8_t

        """
        return _pyupm_mpu9150.MPU60X0_setInterruptPinConfig(self, cfg)


    def getInterruptPinConfig(self):
        """
        getInterruptPinConfig(MPU60X0 self) -> uint8_t

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_getInterruptPinConfig(self)


    def installISR(self, gpio, level, isr, arg):
        """
        installISR(MPU60X0 self, int gpio, mraa::Edge level, void (*)(void *) isr, void * arg)

        Parameters:
            gpio: int
            level: mraa::Edge
            isr: void (*)(void *)
            arg: void *

        """
        return _pyupm_mpu9150.MPU60X0_installISR(self, gpio, level, isr, arg)


    def uninstallISR(self):
        """
        uninstallISR(MPU60X0 self)

        Parameters:
            self: upm::MPU60X0 *

        """
        return _pyupm_mpu9150.MPU60X0_uninstallISR(self)

MPU60X0_swigregister = _pyupm_mpu9150.MPU60X0_swigregister
MPU60X0_swigregister(MPU60X0)


_pyupm_mpu9150.MPU9150_I2C_BUS_swigconstant(_pyupm_mpu9150)
MPU9150_I2C_BUS = _pyupm_mpu9150.MPU9150_I2C_BUS

_pyupm_mpu9150.MPU9150_DEFAULT_I2C_ADDR_swigconstant(_pyupm_mpu9150)
MPU9150_DEFAULT_I2C_ADDR = _pyupm_mpu9150.MPU9150_DEFAULT_I2C_ADDR
class MPU9150(MPU60X0):
    """Proxy of C++ upm::MPU9150 class"""
    __swig_setmethods__ = {}
    for _s in [MPU60X0]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPU9150, name, value)
    __swig_getmethods__ = {}
    for _s in [MPU60X0]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MPU9150, name)
    __repr__ = _swig_repr

    def __init__(self, bus=0, address=0x68, magAddress=0x0c):
        """
        __init__(upm::MPU9150 self, int bus=0, int address=0x68, int magAddress=0x0c) -> MPU9150

        Parameters:
            bus: int
            address: int
            magAddress: int

        __init__(upm::MPU9150 self, int bus=0, int address=0x68) -> MPU9150

        Parameters:
            bus: int
            address: int

        __init__(upm::MPU9150 self, int bus=0) -> MPU9150

        Parameters:
            bus: int

        __init__(upm::MPU9150 self) -> MPU9150
        """
        this = _pyupm_mpu9150.new_MPU9150(bus, address, magAddress)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_MPU9150
    __del__ = lambda self: None

    def init(self):
        """
        init(MPU9150 self) -> bool

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_init(self)


    def update(self):
        """
        update(MPU9150 self)

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_update(self)


    def getMagnetometer(self, x, y, z):
        """
        getMagnetometer(MPU9150 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *

        """
        return _pyupm_mpu9150.MPU9150_getMagnetometer(self, x, y, z)

MPU9150_swigregister = _pyupm_mpu9150.MPU9150_swigregister
MPU9150_swigregister(MPU9150)


_pyupm_mpu9150.MPU9250_I2C_BUS_swigconstant(_pyupm_mpu9150)
MPU9250_I2C_BUS = _pyupm_mpu9150.MPU9250_I2C_BUS

_pyupm_mpu9150.MPU9250_DEFAULT_I2C_ADDR_swigconstant(_pyupm_mpu9150)
MPU9250_DEFAULT_I2C_ADDR = _pyupm_mpu9150.MPU9250_DEFAULT_I2C_ADDR
class MPU9250(MPU9150):
    """Proxy of C++ upm::MPU9250 class"""
    __swig_setmethods__ = {}
    for _s in [MPU9150]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPU9250, name, value)
    __swig_getmethods__ = {}
    for _s in [MPU9150]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MPU9250, name)
    __repr__ = _swig_repr

    def __init__(self, bus=0, address=0x68, magAddress=0x0c):
        """
        __init__(upm::MPU9250 self, int bus=0, int address=0x68, int magAddress=0x0c) -> MPU9250

        Parameters:
            bus: int
            address: int
            magAddress: int

        __init__(upm::MPU9250 self, int bus=0, int address=0x68) -> MPU9250

        Parameters:
            bus: int
            address: int

        __init__(upm::MPU9250 self, int bus=0) -> MPU9250

        Parameters:
            bus: int

        __init__(upm::MPU9250 self) -> MPU9250
        """
        this = _pyupm_mpu9150.new_MPU9250(bus, address, magAddress)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_MPU9250
    __del__ = lambda self: None

    def getTemperature(self):
        """
        getTemperature(MPU9250 self) -> float

        Parameters:
            self: upm::MPU9250 *

        """
        return _pyupm_mpu9150.MPU9250_getTemperature(self)

MPU9250_swigregister = _pyupm_mpu9150.MPU9250_swigregister
MPU9250_swigregister(MPU9250)

# This file is compatible with both classic and new-style classes.


