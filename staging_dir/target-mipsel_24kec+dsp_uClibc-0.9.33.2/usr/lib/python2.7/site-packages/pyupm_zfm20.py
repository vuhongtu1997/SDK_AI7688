# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_zfm20', [dirname(__file__)])
        except ImportError:
            import _pyupm_zfm20
            return _pyupm_zfm20
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_zfm20', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_zfm20 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_zfm20
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class uint16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_zfm20.new_uint16Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_zfm20.delete_uint16Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_zfm20.uint16Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_zfm20.uint16Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_zfm20.uint16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_zfm20.uint16Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_zfm20.uint16Array_frompointer)
uint16Array_swigregister = _pyupm_zfm20.uint16Array_swigregister
uint16Array_swigregister(uint16Array)

def uint16Array_frompointer(t):
    return _pyupm_zfm20.uint16Array_frompointer(t)
uint16Array_frompointer = _pyupm_zfm20.uint16Array_frompointer

class uint32Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_zfm20.new_uint32Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_zfm20.delete_uint32Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_zfm20.uint32Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_zfm20.uint32Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_zfm20.uint32Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_zfm20.uint32Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_zfm20.uint32Array_frompointer)
uint32Array_swigregister = _pyupm_zfm20.uint32Array_swigregister
uint32Array_swigregister(uint32Array)

def uint32Array_frompointer(t):
    return _pyupm_zfm20.uint32Array_frompointer(t)
uint32Array_frompointer = _pyupm_zfm20.uint32Array_frompointer


def new_intp():
    """new_intp() -> int *"""
    return _pyupm_zfm20.new_intp()

def copy_intp(value):
    """
    copy_intp(int value) -> int *

    Parameters:
        value: int

    """
    return _pyupm_zfm20.copy_intp(value)

def delete_intp(obj):
    """
    delete_intp(int * obj)

    Parameters:
        obj: int *

    """
    return _pyupm_zfm20.delete_intp(obj)

def intp_assign(obj, value):
    """
    intp_assign(int * obj, int value)

    Parameters:
        obj: int *
        value: int

    """
    return _pyupm_zfm20.intp_assign(obj, value)

def intp_value(obj):
    """
    intp_value(int * obj) -> int

    Parameters:
        obj: int *

    """
    return _pyupm_zfm20.intp_value(obj)

_pyupm_zfm20.ZFM20_DEFAULT_UART_swigconstant(_pyupm_zfm20)
ZFM20_DEFAULT_UART = _pyupm_zfm20.ZFM20_DEFAULT_UART

_pyupm_zfm20.ZFM20_START1_swigconstant(_pyupm_zfm20)
ZFM20_START1 = _pyupm_zfm20.ZFM20_START1

_pyupm_zfm20.ZFM20_START2_swigconstant(_pyupm_zfm20)
ZFM20_START2 = _pyupm_zfm20.ZFM20_START2

_pyupm_zfm20.ZFM20_MAX_PKT_LEN_swigconstant(_pyupm_zfm20)
ZFM20_MAX_PKT_LEN = _pyupm_zfm20.ZFM20_MAX_PKT_LEN

_pyupm_zfm20.ZFM20_TIMEOUT_swigconstant(_pyupm_zfm20)
ZFM20_TIMEOUT = _pyupm_zfm20.ZFM20_TIMEOUT

_pyupm_zfm20.ZFM20_DEFAULT_PASSWORD_swigconstant(_pyupm_zfm20)
ZFM20_DEFAULT_PASSWORD = _pyupm_zfm20.ZFM20_DEFAULT_PASSWORD

_pyupm_zfm20.ZFM20_DEFAULT_ADDRESS_swigconstant(_pyupm_zfm20)
ZFM20_DEFAULT_ADDRESS = _pyupm_zfm20.ZFM20_DEFAULT_ADDRESS
class ZFM20(_object):
    """Proxy of C++ upm::ZFM20 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZFM20, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZFM20, name)
    __repr__ = _swig_repr
    CMD_GEN_IMAGE = _pyupm_zfm20.ZFM20_CMD_GEN_IMAGE
    CMD_IMG2TZ = _pyupm_zfm20.ZFM20_CMD_IMG2TZ
    CMD_MATCH = _pyupm_zfm20.ZFM20_CMD_MATCH
    CMD_SEARCH = _pyupm_zfm20.ZFM20_CMD_SEARCH
    CMD_REGMODEL = _pyupm_zfm20.ZFM20_CMD_REGMODEL
    CMD_STORE = _pyupm_zfm20.ZFM20_CMD_STORE
    CMD_LOAD_TMPL = _pyupm_zfm20.ZFM20_CMD_LOAD_TMPL
    CMD_UPLOAD_TMPL = _pyupm_zfm20.ZFM20_CMD_UPLOAD_TMPL
    CMD_DOWNLOAD_TMPL = _pyupm_zfm20.ZFM20_CMD_DOWNLOAD_TMPL
    CMD_UPLOAD_IMAGE = _pyupm_zfm20.ZFM20_CMD_UPLOAD_IMAGE
    CMD_DOWNLOAD_IMAGE = _pyupm_zfm20.ZFM20_CMD_DOWNLOAD_IMAGE
    CMD_DELETE_TMPL = _pyupm_zfm20.ZFM20_CMD_DELETE_TMPL
    CMD_EMPTYDB = _pyupm_zfm20.ZFM20_CMD_EMPTYDB
    CMD_SET_SYSPARAMS = _pyupm_zfm20.ZFM20_CMD_SET_SYSPARAMS
    CMD_GET_SYSPARAMS = _pyupm_zfm20.ZFM20_CMD_GET_SYSPARAMS
    CMD_SET_PASSWORD = _pyupm_zfm20.ZFM20_CMD_SET_PASSWORD
    CMD_VERIFY_PASSWORD = _pyupm_zfm20.ZFM20_CMD_VERIFY_PASSWORD
    CMD_GET_RANDOM_NUMBER = _pyupm_zfm20.ZFM20_CMD_GET_RANDOM_NUMBER
    CMD_SET_ADDRESS = _pyupm_zfm20.ZFM20_CMD_SET_ADDRESS
    CMD_GET_TMPL_COUNT = _pyupm_zfm20.ZFM20_CMD_GET_TMPL_COUNT
    CMD_GET_INDEX_TABLE = _pyupm_zfm20.ZFM20_CMD_GET_INDEX_TABLE
    ERR_OK = _pyupm_zfm20.ZFM20_ERR_OK
    ERR_PACKET_RX_ERROR = _pyupm_zfm20.ZFM20_ERR_PACKET_RX_ERROR
    ERR_NO_FINGER = _pyupm_zfm20.ZFM20_ERR_NO_FINGER
    ERR_FP_IMAGE_FAILED = _pyupm_zfm20.ZFM20_ERR_FP_IMAGE_FAILED
    ERR_FP_TOO_MESSY = _pyupm_zfm20.ZFM20_ERR_FP_TOO_MESSY
    ERR_FP_IMAGE_FEW_FEATURES = _pyupm_zfm20.ZFM20_ERR_FP_IMAGE_FEW_FEATURES
    ERR_FP_NOMATCH = _pyupm_zfm20.ZFM20_ERR_FP_NOMATCH
    ERR_FP_NOTFOUND = _pyupm_zfm20.ZFM20_ERR_FP_NOTFOUND
    ERR_FP_ENROLLMISMATCH = _pyupm_zfm20.ZFM20_ERR_FP_ENROLLMISMATCH
    ERR_BAD_LOCATION = _pyupm_zfm20.ZFM20_ERR_BAD_LOCATION
    ERR_DB_ERROR = _pyupm_zfm20.ZFM20_ERR_DB_ERROR
    ERR_UPLOAD_FEAT_FAILED = _pyupm_zfm20.ZFM20_ERR_UPLOAD_FEAT_FAILED
    ERR_NO_MORE_PACKETS = _pyupm_zfm20.ZFM20_ERR_NO_MORE_PACKETS
    ERR_UPLOAD_IMG_FAILED = _pyupm_zfm20.ZFM20_ERR_UPLOAD_IMG_FAILED
    ERR_RM_TMPL_FAILED = _pyupm_zfm20.ZFM20_ERR_RM_TMPL_FAILED
    ERR_EMPTY_DB_FAILED = _pyupm_zfm20.ZFM20_ERR_EMPTY_DB_FAILED
    ERR_INVALID_PWD = _pyupm_zfm20.ZFM20_ERR_INVALID_PWD
    ERR_INVALID_IMAGE = _pyupm_zfm20.ZFM20_ERR_INVALID_IMAGE
    ERR_RW_FLASH_ERROR = _pyupm_zfm20.ZFM20_ERR_RW_FLASH_ERROR
    ERR_INVALID_REG = _pyupm_zfm20.ZFM20_ERR_INVALID_REG
    ERR_INVALID_ADDR = _pyupm_zfm20.ZFM20_ERR_INVALID_ADDR
    ERR_NEEDS_PWD = _pyupm_zfm20.ZFM20_ERR_NEEDS_PWD
    ERR_INTERNAL_ERR = _pyupm_zfm20.ZFM20_ERR_INTERNAL_ERR
    PKT_COMMAND = _pyupm_zfm20.ZFM20_PKT_COMMAND
    PKT_DATA = _pyupm_zfm20.ZFM20_PKT_DATA
    PKT_ACK = _pyupm_zfm20.ZFM20_PKT_ACK
    PKT_END_DATA = _pyupm_zfm20.ZFM20_PKT_END_DATA

    def __init__(self, uart):
        """
        __init__(upm::ZFM20 self, int uart) -> ZFM20

        Parameters:
            uart: int

        """
        this = _pyupm_zfm20.new_ZFM20(uart)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_zfm20.delete_ZFM20
    __del__ = lambda self: None

    def dataAvailable(self, millis):
        """
        dataAvailable(ZFM20 self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int

        """
        return _pyupm_zfm20.ZFM20_dataAvailable(self, millis)


    def readData(self, buffer, len):
        """
        readData(ZFM20 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_zfm20.ZFM20_readData(self, buffer, len)


    def writeData(self, buffer, len):
        """
        writeData(ZFM20 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_zfm20.ZFM20_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(ZFM20 self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(ZFM20 self) -> bool

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_setupTty(self, *args)


    def writeCmdPacket(self, pkt, len):
        """
        writeCmdPacket(ZFM20 self, uint8_t * pkt, int len) -> int

        Parameters:
            pkt: uint8_t *
            len: int

        """
        return _pyupm_zfm20.ZFM20_writeCmdPacket(self, pkt, len)


    def verifyPacket(self, pkt, len):
        """
        verifyPacket(ZFM20 self, uint8_t * pkt, int len) -> bool

        Parameters:
            pkt: uint8_t *
            len: int

        """
        return _pyupm_zfm20.ZFM20_verifyPacket(self, pkt, len)


    def getMillis(self):
        """
        getMillis(ZFM20 self) -> uint32_t

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_getMillis(self)


    def initClock(self):
        """
        initClock(ZFM20 self)

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_initClock(self)


    def setAddress(self, addr):
        """
        setAddress(ZFM20 self, uint32_t addr)

        Parameters:
            addr: uint32_t

        """
        return _pyupm_zfm20.ZFM20_setAddress(self, addr)


    def setPassword(self, pw):
        """
        setPassword(ZFM20 self, uint32_t pw)

        Parameters:
            pw: uint32_t

        """
        return _pyupm_zfm20.ZFM20_setPassword(self, pw)


    def getResponse(self, pkt, len):
        """
        getResponse(ZFM20 self, uint8_t * pkt, int len) -> bool

        Parameters:
            pkt: uint8_t *
            len: int

        """
        return _pyupm_zfm20.ZFM20_getResponse(self, pkt, len)


    def verifyPassword(self):
        """
        verifyPassword(ZFM20 self) -> bool

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_verifyPassword(self)


    def getNumTemplates(self):
        """
        getNumTemplates(ZFM20 self) -> int

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_getNumTemplates(self)


    def setNewPassword(self, pwd):
        """
        setNewPassword(ZFM20 self, uint32_t pwd) -> bool

        Parameters:
            pwd: uint32_t

        """
        return _pyupm_zfm20.ZFM20_setNewPassword(self, pwd)


    def setNewAddress(self, addr):
        """
        setNewAddress(ZFM20 self, uint32_t addr) -> bool

        Parameters:
            addr: uint32_t

        """
        return _pyupm_zfm20.ZFM20_setNewAddress(self, addr)


    def generateImage(self):
        """
        generateImage(ZFM20 self) -> uint8_t

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_generateImage(self)


    def image2Tz(self, slot):
        """
        image2Tz(ZFM20 self, int slot) -> uint8_t

        Parameters:
            slot: int

        """
        return _pyupm_zfm20.ZFM20_image2Tz(self, slot)


    def createModel(self):
        """
        createModel(ZFM20 self) -> uint8_t

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_createModel(self)


    def storeModel(self, slot, id):
        """
        storeModel(ZFM20 self, int slot, uint16_t id) -> uint8_t

        Parameters:
            slot: int
            id: uint16_t

        """
        return _pyupm_zfm20.ZFM20_storeModel(self, slot, id)


    def deleteModel(self, id):
        """
        deleteModel(ZFM20 self, uint16_t id) -> uint8_t

        Parameters:
            id: uint16_t

        """
        return _pyupm_zfm20.ZFM20_deleteModel(self, id)


    def deleteDB(self):
        """
        deleteDB(ZFM20 self) -> uint8_t

        Parameters:
            self: upm::ZFM20 *

        """
        return _pyupm_zfm20.ZFM20_deleteDB(self)


    def search(self, slot, id, score):
        """
        search(ZFM20 self, int slot, uint16_t * id, uint16_t * score) -> uint8_t

        Parameters:
            slot: int
            id: uint16_t *
            score: uint16_t *

        """
        return _pyupm_zfm20.ZFM20_search(self, slot, id, score)


    def match(self, score):
        """
        match(ZFM20 self, uint16_t * score) -> uint8_t

        Parameters:
            score: uint16_t *

        """
        return _pyupm_zfm20.ZFM20_match(self, score)

ZFM20_swigregister = _pyupm_zfm20.ZFM20_swigregister
ZFM20_swigregister(ZFM20)

# This file is compatible with both classic and new-style classes.

cvar = _pyupm_zfm20.cvar

