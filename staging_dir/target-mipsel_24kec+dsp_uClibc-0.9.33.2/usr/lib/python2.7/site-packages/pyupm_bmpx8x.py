# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_bmpx8x', [dirname(__file__)])
        except ImportError:
            import _pyupm_bmpx8x
            return _pyupm_bmpx8x
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_bmpx8x', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_bmpx8x = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_bmpx8x
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_bmpx8x.ADDR_swigconstant(_pyupm_bmpx8x)
ADDR = _pyupm_bmpx8x.ADDR

_pyupm_bmpx8x.BMP085_ULTRALOWPOWER_swigconstant(_pyupm_bmpx8x)
BMP085_ULTRALOWPOWER = _pyupm_bmpx8x.BMP085_ULTRALOWPOWER

_pyupm_bmpx8x.BMP085_STANDARD_swigconstant(_pyupm_bmpx8x)
BMP085_STANDARD = _pyupm_bmpx8x.BMP085_STANDARD

_pyupm_bmpx8x.BMP085_HIGHRES_swigconstant(_pyupm_bmpx8x)
BMP085_HIGHRES = _pyupm_bmpx8x.BMP085_HIGHRES

_pyupm_bmpx8x.BMP085_ULTRAHIGHRES_swigconstant(_pyupm_bmpx8x)
BMP085_ULTRAHIGHRES = _pyupm_bmpx8x.BMP085_ULTRAHIGHRES

_pyupm_bmpx8x.BMP085_CAL_AC1_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC1 = _pyupm_bmpx8x.BMP085_CAL_AC1

_pyupm_bmpx8x.BMP085_CAL_AC2_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC2 = _pyupm_bmpx8x.BMP085_CAL_AC2

_pyupm_bmpx8x.BMP085_CAL_AC3_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC3 = _pyupm_bmpx8x.BMP085_CAL_AC3

_pyupm_bmpx8x.BMP085_CAL_AC4_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC4 = _pyupm_bmpx8x.BMP085_CAL_AC4

_pyupm_bmpx8x.BMP085_CAL_AC5_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC5 = _pyupm_bmpx8x.BMP085_CAL_AC5

_pyupm_bmpx8x.BMP085_CAL_AC6_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_AC6 = _pyupm_bmpx8x.BMP085_CAL_AC6

_pyupm_bmpx8x.BMP085_CAL_B1_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_B1 = _pyupm_bmpx8x.BMP085_CAL_B1

_pyupm_bmpx8x.BMP085_CAL_B2_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_B2 = _pyupm_bmpx8x.BMP085_CAL_B2

_pyupm_bmpx8x.BMP085_CAL_MB_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_MB = _pyupm_bmpx8x.BMP085_CAL_MB

_pyupm_bmpx8x.BMP085_CAL_MC_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_MC = _pyupm_bmpx8x.BMP085_CAL_MC

_pyupm_bmpx8x.BMP085_CAL_MD_swigconstant(_pyupm_bmpx8x)
BMP085_CAL_MD = _pyupm_bmpx8x.BMP085_CAL_MD

_pyupm_bmpx8x.BMP085_CONTROL_swigconstant(_pyupm_bmpx8x)
BMP085_CONTROL = _pyupm_bmpx8x.BMP085_CONTROL

_pyupm_bmpx8x.BMP085_TEMPDATA_swigconstant(_pyupm_bmpx8x)
BMP085_TEMPDATA = _pyupm_bmpx8x.BMP085_TEMPDATA

_pyupm_bmpx8x.BMP085_PRESSUREDATA_swigconstant(_pyupm_bmpx8x)
BMP085_PRESSUREDATA = _pyupm_bmpx8x.BMP085_PRESSUREDATA

_pyupm_bmpx8x.BMP085_READTEMPCMD_swigconstant(_pyupm_bmpx8x)
BMP085_READTEMPCMD = _pyupm_bmpx8x.BMP085_READTEMPCMD

_pyupm_bmpx8x.BMP085_READPRESSURECMD_swigconstant(_pyupm_bmpx8x)
BMP085_READPRESSURECMD = _pyupm_bmpx8x.BMP085_READPRESSURECMD

_pyupm_bmpx8x.HIGH_swigconstant(_pyupm_bmpx8x)
HIGH = _pyupm_bmpx8x.HIGH

_pyupm_bmpx8x.LOW_swigconstant(_pyupm_bmpx8x)
LOW = _pyupm_bmpx8x.LOW
class BMPX8X(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BMPX8X, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BMPX8X, name)
    __repr__ = _swig_repr

    def __init__(self, bus, devAddr=0x77, mode=3):
        this = _pyupm_bmpx8x.new_BMPX8X(bus, devAddr, mode)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getPressure(self):
        return _pyupm_bmpx8x.BMPX8X_getPressure(self)

    def getPressureRaw(self):
        return _pyupm_bmpx8x.BMPX8X_getPressureRaw(self)

    def getTemperatureRaw(self):
        return _pyupm_bmpx8x.BMPX8X_getTemperatureRaw(self)

    def getTemperature(self):
        return _pyupm_bmpx8x.BMPX8X_getTemperature(self)

    def getSealevelPressure(self, altitudeMeters=0):
        return _pyupm_bmpx8x.BMPX8X_getSealevelPressure(self, altitudeMeters)

    def getAltitude(self, sealevelPressure=101325):
        return _pyupm_bmpx8x.BMPX8X_getAltitude(self, sealevelPressure)

    def computeB5(self, UT):
        return _pyupm_bmpx8x.BMPX8X_computeB5(self, UT)

    def i2cReadReg_16(self, reg):
        return _pyupm_bmpx8x.BMPX8X_i2cReadReg_16(self, reg)

    def i2cWriteReg(self, reg, value):
        return _pyupm_bmpx8x.BMPX8X_i2cWriteReg(self, reg, value)

    def i2cReadReg_8(self, reg):
        return _pyupm_bmpx8x.BMPX8X_i2cReadReg_8(self, reg)
    __swig_destroy__ = _pyupm_bmpx8x.delete_BMPX8X
    __del__ = lambda self: None
BMPX8X_swigregister = _pyupm_bmpx8x.BMPX8X_swigregister
BMPX8X_swigregister(BMPX8X)

# This file is compatible with both classic and new-style classes.


