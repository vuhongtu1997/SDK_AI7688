# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_pca9685', [dirname(__file__)])
        except ImportError:
            import _pyupm_pca9685
            return _pyupm_pca9685
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_pca9685', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_pca9685 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_pca9685
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_pca9685.PCA9685_I2C_BUS_swigconstant(_pyupm_pca9685)
PCA9685_I2C_BUS = _pyupm_pca9685.PCA9685_I2C_BUS

_pyupm_pca9685.PCA9685_DEFAULT_I2C_ADDR_swigconstant(_pyupm_pca9685)
PCA9685_DEFAULT_I2C_ADDR = _pyupm_pca9685.PCA9685_DEFAULT_I2C_ADDR

_pyupm_pca9685.PCA9685_INTERNAL_OSC_swigconstant(_pyupm_pca9685)
PCA9685_INTERNAL_OSC = _pyupm_pca9685.PCA9685_INTERNAL_OSC

_pyupm_pca9685.PCA9685_ALL_LED_swigconstant(_pyupm_pca9685)
PCA9685_ALL_LED = _pyupm_pca9685.PCA9685_ALL_LED
class PCA9685(_object):
    """Proxy of C++ upm::PCA9685 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCA9685, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCA9685, name)
    __repr__ = _swig_repr
    REG_MODE1 = _pyupm_pca9685.PCA9685_REG_MODE1
    REG_MODE2 = _pyupm_pca9685.PCA9685_REG_MODE2
    REG_I2C_SA1 = _pyupm_pca9685.PCA9685_REG_I2C_SA1
    REG_I2C_SA2 = _pyupm_pca9685.PCA9685_REG_I2C_SA2
    REG_I2C_SA3 = _pyupm_pca9685.PCA9685_REG_I2C_SA3
    REG_ALLCALL = _pyupm_pca9685.PCA9685_REG_ALLCALL
    REG_LED0_ON_L = _pyupm_pca9685.PCA9685_REG_LED0_ON_L
    REG_LED0_ON_H = _pyupm_pca9685.PCA9685_REG_LED0_ON_H
    REG_LED0_OFF_L = _pyupm_pca9685.PCA9685_REG_LED0_OFF_L
    REG_LED0_OFF_H = _pyupm_pca9685.PCA9685_REG_LED0_OFF_H
    REG_LED1_ON_L = _pyupm_pca9685.PCA9685_REG_LED1_ON_L
    REG_LED1_ON_H = _pyupm_pca9685.PCA9685_REG_LED1_ON_H
    REG_LED1_OFF_L = _pyupm_pca9685.PCA9685_REG_LED1_OFF_L
    REG_LED1_OFF_H = _pyupm_pca9685.PCA9685_REG_LED1_OFF_H
    REG_LED2_ON_L = _pyupm_pca9685.PCA9685_REG_LED2_ON_L
    REG_LED2_ON_H = _pyupm_pca9685.PCA9685_REG_LED2_ON_H
    REG_LED2_OFF_L = _pyupm_pca9685.PCA9685_REG_LED2_OFF_L
    REG_LED2_OFF_H = _pyupm_pca9685.PCA9685_REG_LED2_OFF_H
    REG_LED3_ON_L = _pyupm_pca9685.PCA9685_REG_LED3_ON_L
    REG_LED3_ON_H = _pyupm_pca9685.PCA9685_REG_LED3_ON_H
    REG_LED3_OFF_L = _pyupm_pca9685.PCA9685_REG_LED3_OFF_L
    REG_LED3_OFF_H = _pyupm_pca9685.PCA9685_REG_LED3_OFF_H
    REG_LED4_ON_L = _pyupm_pca9685.PCA9685_REG_LED4_ON_L
    REG_LED4_ON_H = _pyupm_pca9685.PCA9685_REG_LED4_ON_H
    REG_LED4_OFF_L = _pyupm_pca9685.PCA9685_REG_LED4_OFF_L
    REG_LED4_OFF_H = _pyupm_pca9685.PCA9685_REG_LED4_OFF_H
    REG_LED5_ON_L = _pyupm_pca9685.PCA9685_REG_LED5_ON_L
    REG_LED5_ON_H = _pyupm_pca9685.PCA9685_REG_LED5_ON_H
    REG_LED5_OFF_L = _pyupm_pca9685.PCA9685_REG_LED5_OFF_L
    REG_LED5_OFF_H = _pyupm_pca9685.PCA9685_REG_LED5_OFF_H
    REG_LED6_ON_L = _pyupm_pca9685.PCA9685_REG_LED6_ON_L
    REG_LED6_ON_H = _pyupm_pca9685.PCA9685_REG_LED6_ON_H
    REG_LED6_OFF_L = _pyupm_pca9685.PCA9685_REG_LED6_OFF_L
    REG_LED6_OFF_H = _pyupm_pca9685.PCA9685_REG_LED6_OFF_H
    REG_LED7_ON_L = _pyupm_pca9685.PCA9685_REG_LED7_ON_L
    REG_LED7_ON_H = _pyupm_pca9685.PCA9685_REG_LED7_ON_H
    REG_LED7_OFF_L = _pyupm_pca9685.PCA9685_REG_LED7_OFF_L
    REG_LED7_OFF_H = _pyupm_pca9685.PCA9685_REG_LED7_OFF_H
    REG_LED8_ON_L = _pyupm_pca9685.PCA9685_REG_LED8_ON_L
    REG_LED8_ON_H = _pyupm_pca9685.PCA9685_REG_LED8_ON_H
    REG_LED8_OFF_L = _pyupm_pca9685.PCA9685_REG_LED8_OFF_L
    REG_LED8_OFF_H = _pyupm_pca9685.PCA9685_REG_LED8_OFF_H
    REG_LED9_ON_L = _pyupm_pca9685.PCA9685_REG_LED9_ON_L
    REG_LED9_ON_H = _pyupm_pca9685.PCA9685_REG_LED9_ON_H
    REG_LED9_OFF_L = _pyupm_pca9685.PCA9685_REG_LED9_OFF_L
    REG_LED9_OFF_H = _pyupm_pca9685.PCA9685_REG_LED9_OFF_H
    REG_LED10_ON_L = _pyupm_pca9685.PCA9685_REG_LED10_ON_L
    REG_LED10_ON_H = _pyupm_pca9685.PCA9685_REG_LED10_ON_H
    REG_LED10_OFF_L = _pyupm_pca9685.PCA9685_REG_LED10_OFF_L
    REG_LED10_OFF_H = _pyupm_pca9685.PCA9685_REG_LED10_OFF_H
    REG_LED11_ON_L = _pyupm_pca9685.PCA9685_REG_LED11_ON_L
    REG_LED11_ON_H = _pyupm_pca9685.PCA9685_REG_LED11_ON_H
    REG_LED11_OFF_L = _pyupm_pca9685.PCA9685_REG_LED11_OFF_L
    REG_LED11_OFF_H = _pyupm_pca9685.PCA9685_REG_LED11_OFF_H
    REG_LED12_ON_L = _pyupm_pca9685.PCA9685_REG_LED12_ON_L
    REG_LED12_ON_H = _pyupm_pca9685.PCA9685_REG_LED12_ON_H
    REG_LED12_OFF_L = _pyupm_pca9685.PCA9685_REG_LED12_OFF_L
    REG_LED12_OFF_H = _pyupm_pca9685.PCA9685_REG_LED12_OFF_H
    REG_LED13_ON_L = _pyupm_pca9685.PCA9685_REG_LED13_ON_L
    REG_LED13_ON_H = _pyupm_pca9685.PCA9685_REG_LED13_ON_H
    REG_LED13_OFF_L = _pyupm_pca9685.PCA9685_REG_LED13_OFF_L
    REG_LED13_OFF_H = _pyupm_pca9685.PCA9685_REG_LED13_OFF_H
    REG_LED14_ON_L = _pyupm_pca9685.PCA9685_REG_LED14_ON_L
    REG_LED14_ON_H = _pyupm_pca9685.PCA9685_REG_LED14_ON_H
    REG_LED14_OFF_L = _pyupm_pca9685.PCA9685_REG_LED14_OFF_L
    REG_LED14_OFF_H = _pyupm_pca9685.PCA9685_REG_LED14_OFF_H
    REG_LED15_ON_L = _pyupm_pca9685.PCA9685_REG_LED15_ON_L
    REG_LED15_ON_H = _pyupm_pca9685.PCA9685_REG_LED15_ON_H
    REG_LED15_OFF_L = _pyupm_pca9685.PCA9685_REG_LED15_OFF_L
    REG_LED15_OFF_H = _pyupm_pca9685.PCA9685_REG_LED15_OFF_H
    REG_ALL_LED_ON_L = _pyupm_pca9685.PCA9685_REG_ALL_LED_ON_L
    REG_ALL_LED_ON_H = _pyupm_pca9685.PCA9685_REG_ALL_LED_ON_H
    REG_ALL_LED_OFF_L = _pyupm_pca9685.PCA9685_REG_ALL_LED_OFF_L
    REG_ALL_LED_OFF_H = _pyupm_pca9685.PCA9685_REG_ALL_LED_OFF_H
    REG_PRESCALE = _pyupm_pca9685.PCA9685_REG_PRESCALE
    REG_TESTMODE = _pyupm_pca9685.PCA9685_REG_TESTMODE
    MODE1_ALL_CALL = _pyupm_pca9685.PCA9685_MODE1_ALL_CALL
    MODE1_SUB3 = _pyupm_pca9685.PCA9685_MODE1_SUB3
    MODE1_SUB2 = _pyupm_pca9685.PCA9685_MODE1_SUB2
    MODE1_SUB1 = _pyupm_pca9685.PCA9685_MODE1_SUB1
    MODE1_SLEEP = _pyupm_pca9685.PCA9685_MODE1_SLEEP
    MODE1_AI = _pyupm_pca9685.PCA9685_MODE1_AI
    MODE1_EXTCLK = _pyupm_pca9685.PCA9685_MODE1_EXTCLK
    MODE1_RESTART = _pyupm_pca9685.PCA9685_MODE1_RESTART
    MODE2_OUTNE0 = _pyupm_pca9685.PCA9685_MODE2_OUTNE0
    MODE2_OUTNE = _pyupm_pca9685.PCA9685_MODE2_OUTNE
    MODE2_OUTDRV = _pyupm_pca9685.PCA9685_MODE2_OUTDRV
    MODE2_OCH = _pyupm_pca9685.PCA9685_MODE2_OCH
    MODE2_INVRT = _pyupm_pca9685.PCA9685_MODE2_INVRT
    MODE2_RESERVE0 = _pyupm_pca9685.PCA9685_MODE2_RESERVE0
    MODE2_RESERVE1 = _pyupm_pca9685.PCA9685_MODE2_RESERVE1
    MODE2_RESERVE2 = _pyupm_pca9685.PCA9685_MODE2_RESERVE2

    def __init__(self, bus, address=0x60, raw=False):
        """
        __init__(upm::PCA9685 self, int bus, uint8_t address=0x60, bool raw=False) -> PCA9685

        Parameters:
            bus: int
            address: uint8_t
            raw: bool

        __init__(upm::PCA9685 self, int bus, uint8_t address=0x60) -> PCA9685

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::PCA9685 self, int bus) -> PCA9685

        Parameters:
            bus: int

        """
        this = _pyupm_pca9685.new_PCA9685(bus, address, raw)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_pca9685.delete_PCA9685
    __del__ = lambda self: None

    def writeByte(self, reg, byte):
        """
        writeByte(PCA9685 self, uint8_t reg, uint8_t byte) -> bool

        Parameters:
            reg: uint8_t
            byte: uint8_t

        """
        return _pyupm_pca9685.PCA9685_writeByte(self, reg, byte)


    def writeWord(self, reg, word):
        """
        writeWord(PCA9685 self, uint8_t reg, uint16_t word) -> bool

        Parameters:
            reg: uint8_t
            word: uint16_t

        """
        return _pyupm_pca9685.PCA9685_writeWord(self, reg, word)


    def readByte(self, reg):
        """
        readByte(PCA9685 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_pca9685.PCA9685_readByte(self, reg)


    def readWord(self, reg):
        """
        readWord(PCA9685 self, uint8_t reg) -> uint16_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_pca9685.PCA9685_readWord(self, reg)


    def setModeSleep(self, sleep):
        """
        setModeSleep(PCA9685 self, bool sleep) -> bool

        Parameters:
            sleep: bool

        """
        return _pyupm_pca9685.PCA9685_setModeSleep(self, sleep)


    def ledFullOn(self, led, val):
        """
        ledFullOn(PCA9685 self, uint8_t led, bool val) -> bool

        Parameters:
            led: uint8_t
            val: bool

        """
        return _pyupm_pca9685.PCA9685_ledFullOn(self, led, val)


    def ledFullOff(self, led, val):
        """
        ledFullOff(PCA9685 self, uint8_t led, bool val) -> bool

        Parameters:
            led: uint8_t
            val: bool

        """
        return _pyupm_pca9685.PCA9685_ledFullOff(self, led, val)


    def ledOnTime(self, led, time):
        """
        ledOnTime(PCA9685 self, uint8_t led, uint16_t time) -> bool

        Parameters:
            led: uint8_t
            time: uint16_t

        """
        return _pyupm_pca9685.PCA9685_ledOnTime(self, led, time)


    def ledOffTime(self, led, time):
        """
        ledOffTime(PCA9685 self, uint8_t led, uint16_t time) -> bool

        Parameters:
            led: uint8_t
            time: uint16_t

        """
        return _pyupm_pca9685.PCA9685_ledOffTime(self, led, time)


    def setPrescale(self, prescale):
        """
        setPrescale(PCA9685 self, uint8_t prescale) -> bool

        Parameters:
            prescale: uint8_t

        """
        return _pyupm_pca9685.PCA9685_setPrescale(self, prescale)


    def setPrescaleFromHz(self, hz, oscFreq=25000000.0):
        """
        setPrescaleFromHz(PCA9685 self, float hz, float oscFreq=25000000.0) -> bool

        Parameters:
            hz: float
            oscFreq: float

        setPrescaleFromHz(PCA9685 self, float hz) -> bool

        Parameters:
            hz: float

        """
        return _pyupm_pca9685.PCA9685_setPrescaleFromHz(self, hz, oscFreq)


    def enableRestart(self, enabled):
        """
        enableRestart(PCA9685 self, bool enabled)

        Parameters:
            enabled: bool

        """
        return _pyupm_pca9685.PCA9685_enableRestart(self, enabled)

PCA9685_swigregister = _pyupm_pca9685.PCA9685_swigregister
PCA9685_swigregister(PCA9685)

# This file is compatible with both classic and new-style classes.


