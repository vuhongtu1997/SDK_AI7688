# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_uln200xa', [dirname(__file__)])
        except ImportError:
            import _pyupm_uln200xa
            return _pyupm_uln200xa
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_uln200xa', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_uln200xa = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_uln200xa
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class ULN200XA(_object):
    """Proxy of C++ upm::ULN200XA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULN200XA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULN200XA, name)
    __repr__ = _swig_repr
    DIR_CW = _pyupm_uln200xa.ULN200XA_DIR_CW
    DIR_CCW = _pyupm_uln200xa.ULN200XA_DIR_CCW

    def __init__(self, stepsPerRev, i1, i2, i3, i4):
        """
        __init__(upm::ULN200XA self, int stepsPerRev, int i1, int i2, int i3, int i4) -> ULN200XA

        Parameters:
            stepsPerRev: int
            i1: int
            i2: int
            i3: int
            i4: int

        """
        this = _pyupm_uln200xa.new_ULN200XA(stepsPerRev, i1, i2, i3, i4)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_uln200xa.delete_ULN200XA
    __del__ = lambda self: None

    def getMillis(self):
        """
        getMillis(ULN200XA self) -> uint32_t

        Parameters:
            self: upm::ULN200XA *

        """
        return _pyupm_uln200xa.ULN200XA_getMillis(self)


    def initClock(self):
        """
        initClock(ULN200XA self)

        Parameters:
            self: upm::ULN200XA *

        """
        return _pyupm_uln200xa.ULN200XA_initClock(self)


    def setSpeed(self, speed):
        """
        setSpeed(ULN200XA self, int speed)

        Parameters:
            speed: int

        """
        return _pyupm_uln200xa.ULN200XA_setSpeed(self, speed)


    def setDirection(self, dir):
        """
        setDirection(ULN200XA self, upm::ULN200XA::ULN200XA_DIRECTION_T dir)

        Parameters:
            dir: enum upm::ULN200XA::ULN200XA_DIRECTION_T

        """
        return _pyupm_uln200xa.ULN200XA_setDirection(self, dir)


    def stepperSteps(self, steps):
        """
        stepperSteps(ULN200XA self, unsigned int steps)

        Parameters:
            steps: unsigned int

        """
        return _pyupm_uln200xa.ULN200XA_stepperSteps(self, steps)


    def release(self):
        """
        release(ULN200XA self)

        Parameters:
            self: upm::ULN200XA *

        """
        return _pyupm_uln200xa.ULN200XA_release(self)

ULN200XA_swigregister = _pyupm_uln200xa.ULN200XA_swigregister
ULN200XA_swigregister(ULN200XA)

# This file is compatible with both classic and new-style classes.


