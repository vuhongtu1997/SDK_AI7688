# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mhz16', [dirname(__file__)])
        except ImportError:
            import _pyupm_mhz16
            return _pyupm_mhz16
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mhz16', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mhz16 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mhz16
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intp():
    """new_intp() -> int *"""
    return _pyupm_mhz16.new_intp()

def copy_intp(value):
    """
    copy_intp(int value) -> int *

    Parameters:
        value: int

    """
    return _pyupm_mhz16.copy_intp(value)

def delete_intp(obj):
    """
    delete_intp(int * obj)

    Parameters:
        obj: int *

    """
    return _pyupm_mhz16.delete_intp(obj)

def intp_assign(obj, value):
    """
    intp_assign(int * obj, int value)

    Parameters:
        obj: int *
        value: int

    """
    return _pyupm_mhz16.intp_assign(obj, value)

def intp_value(obj):
    """
    intp_value(int * obj) -> int

    Parameters:
        obj: int *

    """
    return _pyupm_mhz16.intp_value(obj)
class MHZ16(_object):
    """Proxy of C++ upm::MHZ16 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MHZ16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MHZ16, name)
    __repr__ = _swig_repr

    def __init__(self, uart):
        """
        __init__(upm::MHZ16 self, int uart) -> MHZ16

        Parameters:
            uart: int

        """
        this = _pyupm_mhz16.new_MHZ16(uart)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mhz16.delete_MHZ16
    __del__ = lambda self: None

    def dataAvailable(self, millis):
        """
        dataAvailable(MHZ16 self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int

        """
        return _pyupm_mhz16.MHZ16_dataAvailable(self, millis)


    def readData(self, buffer, len):
        """
        readData(MHZ16 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_mhz16.MHZ16_readData(self, buffer, len)


    def writeData(self, buffer, len):
        """
        writeData(MHZ16 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_mhz16.MHZ16_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(MHZ16 self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(MHZ16 self) -> bool

        Parameters:
            self: upm::MHZ16 *

        """
        return _pyupm_mhz16.MHZ16_setupTty(self, *args)


    def verifyPacket(self, pkt, len):
        """
        verifyPacket(MHZ16 self, uint8_t * pkt, int len) -> bool

        Parameters:
            pkt: uint8_t *
            len: int

        """
        return _pyupm_mhz16.MHZ16_verifyPacket(self, pkt, len)


    def getData(self, gas, temp):
        """
        getData(MHZ16 self, int * gas, int * temp) -> bool

        Parameters:
            gas: int *
            temp: int *

        """
        return _pyupm_mhz16.MHZ16_getData(self, gas, temp)


    def calibrateZeroPoint(self):
        """
        calibrateZeroPoint(MHZ16 self)

        Parameters:
            self: upm::MHZ16 *

        """
        return _pyupm_mhz16.MHZ16_calibrateZeroPoint(self)

MHZ16_swigregister = _pyupm_mhz16.MHZ16_swigregister
MHZ16_swigregister(MHZ16)
cvar = _pyupm_mhz16.cvar
MHZ16_DEFAULT_UART = cvar.MHZ16_DEFAULT_UART
MHZ16_START = cvar.MHZ16_START
MHZ16_END = cvar.MHZ16_END

# This file is compatible with both classic and new-style classes.


