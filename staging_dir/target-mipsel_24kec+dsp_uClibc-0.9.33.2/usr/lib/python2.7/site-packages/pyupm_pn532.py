# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_pn532', [dirname(__file__)])
        except ImportError:
            import _pyupm_pn532
            return _pyupm_pn532
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_pn532', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_pn532 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_pn532
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_pn532.new_uint8Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_pn532.delete_uint8Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_pn532.uint8Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_pn532.uint8Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_pn532.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_pn532.uint8Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_pn532.uint8Array_frompointer)
uint8Array_swigregister = _pyupm_pn532.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(t):
    return _pyupm_pn532.uint8Array_frompointer(t)
uint8Array_frompointer = _pyupm_pn532.uint8Array_frompointer


_pyupm_pn532.PN532_I2C_BUS_swigconstant(_pyupm_pn532)
PN532_I2C_BUS = _pyupm_pn532.PN532_I2C_BUS

_pyupm_pn532.PN532_DEFAULT_I2C_ADDR_swigconstant(_pyupm_pn532)
PN532_DEFAULT_I2C_ADDR = _pyupm_pn532.PN532_DEFAULT_I2C_ADDR

_pyupm_pn532.PN532_PREAMBLE_swigconstant(_pyupm_pn532)
PN532_PREAMBLE = _pyupm_pn532.PN532_PREAMBLE

_pyupm_pn532.PN532_STARTCODE1_swigconstant(_pyupm_pn532)
PN532_STARTCODE1 = _pyupm_pn532.PN532_STARTCODE1

_pyupm_pn532.PN532_STARTCODE2_swigconstant(_pyupm_pn532)
PN532_STARTCODE2 = _pyupm_pn532.PN532_STARTCODE2

_pyupm_pn532.PN532_POSTAMBLE_swigconstant(_pyupm_pn532)
PN532_POSTAMBLE = _pyupm_pn532.PN532_POSTAMBLE

_pyupm_pn532.PN532_HOSTTOPN532_swigconstant(_pyupm_pn532)
PN532_HOSTTOPN532 = _pyupm_pn532.PN532_HOSTTOPN532

_pyupm_pn532.PN532_PN532TOHOST_swigconstant(_pyupm_pn532)
PN532_PN532TOHOST = _pyupm_pn532.PN532_PN532TOHOST
class PN532(_object):
    """Proxy of C++ upm::PN532 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PN532, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PN532, name)
    __repr__ = _swig_repr
    CMD_DIAGNOSE = _pyupm_pn532.PN532_CMD_DIAGNOSE
    CMD_GETFIRMWAREVERSION = _pyupm_pn532.PN532_CMD_GETFIRMWAREVERSION
    CMD_GETGENERALSTATUS = _pyupm_pn532.PN532_CMD_GETGENERALSTATUS
    CMD_READREGISTER = _pyupm_pn532.PN532_CMD_READREGISTER
    CMD_WRITEREGISTER = _pyupm_pn532.PN532_CMD_WRITEREGISTER
    CMD_READGPIO = _pyupm_pn532.PN532_CMD_READGPIO
    CMD_WRITEGPIO = _pyupm_pn532.PN532_CMD_WRITEGPIO
    CMD_SETSERIALBAUDRATE = _pyupm_pn532.PN532_CMD_SETSERIALBAUDRATE
    CMD_SETPARAMETERS = _pyupm_pn532.PN532_CMD_SETPARAMETERS
    CMD_SAMCONFIGURATION = _pyupm_pn532.PN532_CMD_SAMCONFIGURATION
    CMD_POWERDOWN = _pyupm_pn532.PN532_CMD_POWERDOWN
    CMD_RFCONFIGURATION = _pyupm_pn532.PN532_CMD_RFCONFIGURATION
    CMD_RFREGULATIONTEST = _pyupm_pn532.PN532_CMD_RFREGULATIONTEST
    CMD_INJUMPFORDEP = _pyupm_pn532.PN532_CMD_INJUMPFORDEP
    CMD_INJUMPFORPSL = _pyupm_pn532.PN532_CMD_INJUMPFORPSL
    CMD_INLISTPASSIVETARGET = _pyupm_pn532.PN532_CMD_INLISTPASSIVETARGET
    CMD_INATR = _pyupm_pn532.PN532_CMD_INATR
    CMD_INPSL = _pyupm_pn532.PN532_CMD_INPSL
    CMD_INDATAEXCHANGE = _pyupm_pn532.PN532_CMD_INDATAEXCHANGE
    CMD_INCOMMUNICATETHRU = _pyupm_pn532.PN532_CMD_INCOMMUNICATETHRU
    CMD_INDESELECT = _pyupm_pn532.PN532_CMD_INDESELECT
    CMD_INRELEASE = _pyupm_pn532.PN532_CMD_INRELEASE
    CMD_INSELECT = _pyupm_pn532.PN532_CMD_INSELECT
    CMD_INAUTOPOLL = _pyupm_pn532.PN532_CMD_INAUTOPOLL
    CMD_TGINITASTARGET = _pyupm_pn532.PN532_CMD_TGINITASTARGET
    CMD_TGSETGENERALBYTES = _pyupm_pn532.PN532_CMD_TGSETGENERALBYTES
    CMD_TGGETDATA = _pyupm_pn532.PN532_CMD_TGGETDATA
    CMD_TGSETDATA = _pyupm_pn532.PN532_CMD_TGSETDATA
    CMD_TGSETMETADATA = _pyupm_pn532.PN532_CMD_TGSETMETADATA
    CMD_TGGETINITIATORCOMMAND = _pyupm_pn532.PN532_CMD_TGGETINITIATORCOMMAND
    CMD_TGRESPONSETOINITIATOR = _pyupm_pn532.PN532_CMD_TGRESPONSETOINITIATOR
    CMD_TGGETTARGETSTATUS = _pyupm_pn532.PN532_CMD_TGGETTARGETSTATUS
    RSP_INDATAEXCHANGE = _pyupm_pn532.PN532_RSP_INDATAEXCHANGE
    RSP_INLISTPASSIVETARGET = _pyupm_pn532.PN532_RSP_INLISTPASSIVETARGET
    MIFARE_CMD_AUTH_A = _pyupm_pn532.PN532_MIFARE_CMD_AUTH_A
    MIFARE_CMD_AUTH_B = _pyupm_pn532.PN532_MIFARE_CMD_AUTH_B
    MIFARE_CMD_READ = _pyupm_pn532.PN532_MIFARE_CMD_READ
    MIFARE_CMD_WRITE = _pyupm_pn532.PN532_MIFARE_CMD_WRITE
    MIFARE_CMD_TRANSFER = _pyupm_pn532.PN532_MIFARE_CMD_TRANSFER
    MIFARE_CMD_DECREMENT = _pyupm_pn532.PN532_MIFARE_CMD_DECREMENT
    MIFARE_CMD_INCREMENT = _pyupm_pn532.PN532_MIFARE_CMD_INCREMENT
    MIFARE_CMD_STORE = _pyupm_pn532.PN532_MIFARE_CMD_STORE
    MIFARE_ULTRALIGHT_CMD_WRITE = _pyupm_pn532.PN532_MIFARE_ULTRALIGHT_CMD_WRITE
    NDEF_URIPREFIX_NONE = _pyupm_pn532.PN532_NDEF_URIPREFIX_NONE
    NDEF_URIPREFIX_HTTP_WWWDOT = _pyupm_pn532.PN532_NDEF_URIPREFIX_HTTP_WWWDOT
    NDEF_URIPREFIX_HTTPS_WWWDOT = _pyupm_pn532.PN532_NDEF_URIPREFIX_HTTPS_WWWDOT
    NDEF_URIPREFIX_HTTP = _pyupm_pn532.PN532_NDEF_URIPREFIX_HTTP
    NDEF_URIPREFIX_HTTPS = _pyupm_pn532.PN532_NDEF_URIPREFIX_HTTPS
    NDEF_URIPREFIX_TEL = _pyupm_pn532.PN532_NDEF_URIPREFIX_TEL
    NDEF_URIPREFIX_MAILTO = _pyupm_pn532.PN532_NDEF_URIPREFIX_MAILTO
    NDEF_URIPREFIX_FTP_ANONAT = _pyupm_pn532.PN532_NDEF_URIPREFIX_FTP_ANONAT
    NDEF_URIPREFIX_FTP_FTPDOT = _pyupm_pn532.PN532_NDEF_URIPREFIX_FTP_FTPDOT
    NDEF_URIPREFIX_FTPS = _pyupm_pn532.PN532_NDEF_URIPREFIX_FTPS
    NDEF_URIPREFIX_SFTP = _pyupm_pn532.PN532_NDEF_URIPREFIX_SFTP
    NDEF_URIPREFIX_SMB = _pyupm_pn532.PN532_NDEF_URIPREFIX_SMB
    NDEF_URIPREFIX_NFS = _pyupm_pn532.PN532_NDEF_URIPREFIX_NFS
    NDEF_URIPREFIX_FTP = _pyupm_pn532.PN532_NDEF_URIPREFIX_FTP
    NDEF_URIPREFIX_DAV = _pyupm_pn532.PN532_NDEF_URIPREFIX_DAV
    NDEF_URIPREFIX_NEWS = _pyupm_pn532.PN532_NDEF_URIPREFIX_NEWS
    NDEF_URIPREFIX_TELNET = _pyupm_pn532.PN532_NDEF_URIPREFIX_TELNET
    NDEF_URIPREFIX_IMAP = _pyupm_pn532.PN532_NDEF_URIPREFIX_IMAP
    NDEF_URIPREFIX_RTSP = _pyupm_pn532.PN532_NDEF_URIPREFIX_RTSP
    NDEF_URIPREFIX_URN = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN
    NDEF_URIPREFIX_POP = _pyupm_pn532.PN532_NDEF_URIPREFIX_POP
    NDEF_URIPREFIX_SIP = _pyupm_pn532.PN532_NDEF_URIPREFIX_SIP
    NDEF_URIPREFIX_SIPS = _pyupm_pn532.PN532_NDEF_URIPREFIX_SIPS
    NDEF_URIPREFIX_TFTP = _pyupm_pn532.PN532_NDEF_URIPREFIX_TFTP
    NDEF_URIPREFIX_BTSPP = _pyupm_pn532.PN532_NDEF_URIPREFIX_BTSPP
    NDEF_URIPREFIX_BTL2CAP = _pyupm_pn532.PN532_NDEF_URIPREFIX_BTL2CAP
    NDEF_URIPREFIX_BTGOEP = _pyupm_pn532.PN532_NDEF_URIPREFIX_BTGOEP
    NDEF_URIPREFIX_TCPOBEX = _pyupm_pn532.PN532_NDEF_URIPREFIX_TCPOBEX
    NDEF_URIPREFIX_IRDAOBEX = _pyupm_pn532.PN532_NDEF_URIPREFIX_IRDAOBEX
    NDEF_URIPREFIX_FILE = _pyupm_pn532.PN532_NDEF_URIPREFIX_FILE
    NDEF_URIPREFIX_URN_EPC_ID = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_EPC_ID
    NDEF_URIPREFIX_URN_EPC_TAG = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_EPC_TAG
    NDEF_URIPREFIX_URN_EPC_PAT = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_EPC_PAT
    NDEF_URIPREFIX_URN_EPC_RAW = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_EPC_RAW
    NDEF_URIPREFIX_URN_EPC = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_EPC
    NDEF_URIPREFIX_URN_NFC = _pyupm_pn532.PN532_NDEF_URIPREFIX_URN_NFC
    BAUD_MIFARE_ISO14443A = _pyupm_pn532.PN532_BAUD_MIFARE_ISO14443A
    TAG_TYPE_UNKNOWN = _pyupm_pn532.PN532_TAG_TYPE_UNKNOWN
    TAG_TYPE_MIFARE_CLASSIC = _pyupm_pn532.PN532_TAG_TYPE_MIFARE_CLASSIC
    TAG_TYPE_NFC2 = _pyupm_pn532.PN532_TAG_TYPE_NFC2

    def __init__(self, *args):
        """
        __init__(upm::PN532 self, int irq, int reset, int bus=0, uint8_t address) -> PN532

        Parameters:
            irq: int
            reset: int
            bus: int
            address: uint8_t

        __init__(upm::PN532 self, int irq, int reset, int bus=0) -> PN532

        Parameters:
            irq: int
            reset: int
            bus: int

        __init__(upm::PN532 self, int irq, int reset) -> PN532

        Parameters:
            irq: int
            reset: int

        """
        this = _pyupm_pn532.new_PN532(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_pn532.delete_PN532
    __del__ = lambda self: None

    def init(self):
        """
        init(PN532 self) -> bool

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_init(self)


    def getFirmwareVersion(self):
        """
        getFirmwareVersion(PN532 self) -> uint32_t

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_getFirmwareVersion(self)


    def sendCommandCheckAck(self, cmd, cmdlen, timeout=1000):
        """
        sendCommandCheckAck(PN532 self, uint8_t * cmd, uint8_t cmdlen, uint16_t timeout=1000) -> bool

        Parameters:
            cmd: uint8_t *
            cmdlen: uint8_t
            timeout: uint16_t

        sendCommandCheckAck(PN532 self, uint8_t * cmd, uint8_t cmdlen) -> bool

        Parameters:
            cmd: uint8_t *
            cmdlen: uint8_t

        """
        return _pyupm_pn532.PN532_sendCommandCheckAck(self, cmd, cmdlen, timeout)


    def SAMConfig(self):
        """
        SAMConfig(PN532 self) -> bool

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_SAMConfig(self)


    def setPassiveActivationRetries(self, maxRetries):
        """
        setPassiveActivationRetries(PN532 self, uint8_t maxRetries) -> bool

        Parameters:
            maxRetries: uint8_t

        """
        return _pyupm_pn532.PN532_setPassiveActivationRetries(self, maxRetries)


    def readPassiveTargetID(self, cardbaudrate, uid, uidLength, timeout):
        """
        readPassiveTargetID(PN532 self, upm::PN532::BAUD_T cardbaudrate, uint8_t * uid, uint8_t * uidLength, uint16_t timeout) -> bool

        Parameters:
            cardbaudrate: enum upm::PN532::BAUD_T
            uid: uint8_t *
            uidLength: uint8_t *
            timeout: uint16_t

        """
        return _pyupm_pn532.PN532_readPassiveTargetID(self, cardbaudrate, uid, uidLength, timeout)


    def inDataExchange(self, send, sendLength, response, responseLength):
        """
        inDataExchange(PN532 self, uint8_t * send, uint8_t sendLength, uint8_t * response, uint8_t * responseLength) -> bool

        Parameters:
            send: uint8_t *
            sendLength: uint8_t
            response: uint8_t *
            responseLength: uint8_t *

        """
        return _pyupm_pn532.PN532_inDataExchange(self, send, sendLength, response, responseLength)


    def inListPassiveTarget(self):
        """
        inListPassiveTarget(PN532 self) -> bool

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_inListPassiveTarget(self)


    def mifareclassic_IsFirstBlock(self, uiBlock):
        """
        mifareclassic_IsFirstBlock(PN532 self, uint32_t uiBlock) -> bool

        Parameters:
            uiBlock: uint32_t

        """
        return _pyupm_pn532.PN532_mifareclassic_IsFirstBlock(self, uiBlock)


    def mifareclassic_IsTrailerBlock(self, uiBlock):
        """
        mifareclassic_IsTrailerBlock(PN532 self, uint32_t uiBlock) -> bool

        Parameters:
            uiBlock: uint32_t

        """
        return _pyupm_pn532.PN532_mifareclassic_IsTrailerBlock(self, uiBlock)


    def mifareclassic_AuthenticateBlock(self, uid, uidLen, blockNumber, keyNumber, keyData):
        """
        mifareclassic_AuthenticateBlock(PN532 self, uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData) -> bool

        Parameters:
            uid: uint8_t *
            uidLen: uint8_t
            blockNumber: uint32_t
            keyNumber: uint8_t
            keyData: uint8_t *

        """
        return _pyupm_pn532.PN532_mifareclassic_AuthenticateBlock(self, uid, uidLen, blockNumber, keyNumber, keyData)


    def mifareclassic_ReadDataBlock(self, blockNumber, data):
        """
        mifareclassic_ReadDataBlock(PN532 self, uint8_t blockNumber, uint8_t * data) -> bool

        Parameters:
            blockNumber: uint8_t
            data: uint8_t *

        """
        return _pyupm_pn532.PN532_mifareclassic_ReadDataBlock(self, blockNumber, data)


    def mifareclassic_WriteDataBlock(self, blockNumber, data):
        """
        mifareclassic_WriteDataBlock(PN532 self, uint8_t blockNumber, uint8_t * data) -> bool

        Parameters:
            blockNumber: uint8_t
            data: uint8_t *

        """
        return _pyupm_pn532.PN532_mifareclassic_WriteDataBlock(self, blockNumber, data)


    def mifareclassic_FormatNDEF(self):
        """
        mifareclassic_FormatNDEF(PN532 self) -> bool

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_mifareclassic_FormatNDEF(self)


    def mifareclassic_WriteNDEFURI(self, sectorNumber, uriIdentifier, url):
        """
        mifareclassic_WriteNDEFURI(PN532 self, uint8_t sectorNumber, upm::PN532::NDEF_URI_T uriIdentifier, char const * url) -> bool

        Parameters:
            sectorNumber: uint8_t
            uriIdentifier: enum upm::PN532::NDEF_URI_T
            url: char const *

        """
        return _pyupm_pn532.PN532_mifareclassic_WriteNDEFURI(self, sectorNumber, uriIdentifier, url)


    def ntag2xx_ReadPage(self, page, buffer):
        """
        ntag2xx_ReadPage(PN532 self, uint8_t page, uint8_t * buffer) -> bool

        Parameters:
            page: uint8_t
            buffer: uint8_t *

        """
        return _pyupm_pn532.PN532_ntag2xx_ReadPage(self, page, buffer)


    def ntag2xx_WritePage(self, page, data):
        """
        ntag2xx_WritePage(PN532 self, uint8_t page, uint8_t * data) -> bool

        Parameters:
            page: uint8_t
            data: uint8_t *

        """
        return _pyupm_pn532.PN532_ntag2xx_WritePage(self, page, data)


    def ntag2xx_WriteNDEFURI(self, uriIdentifier, url, dataLen):
        """
        ntag2xx_WriteNDEFURI(PN532 self, upm::PN532::NDEF_URI_T uriIdentifier, char * url, uint8_t dataLen) -> bool

        Parameters:
            uriIdentifier: enum upm::PN532::NDEF_URI_T
            url: char *
            dataLen: uint8_t

        """
        return _pyupm_pn532.PN532_ntag2xx_WriteNDEFURI(self, uriIdentifier, url, dataLen)


    def getATQA(self):
        """
        getATQA(PN532 self) -> uint16_t

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_getATQA(self)


    def getSAK(self):
        """
        getSAK(PN532 self) -> uint8_t

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_getSAK(self)


    def i2cContext(self):
        """
        i2cContext(PN532 self) -> mraa::I2c &

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_i2cContext(self)


    def pn532Debug(self, enable):
        """
        pn532Debug(PN532 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_pn532.PN532_pn532Debug(self, enable)


    def mifareDebug(self, enable):
        """
        mifareDebug(PN532 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_pn532.PN532_mifareDebug(self, enable)


    def tagType(self):
        """
        tagType(PN532 self) -> upm::PN532::TAG_TYPE_T

        Parameters:
            self: upm::PN532 *

        """
        return _pyupm_pn532.PN532_tagType(self)

PN532_swigregister = _pyupm_pn532.PN532_swigregister
PN532_swigregister(PN532)

# This file is compatible with both classic and new-style classes.


