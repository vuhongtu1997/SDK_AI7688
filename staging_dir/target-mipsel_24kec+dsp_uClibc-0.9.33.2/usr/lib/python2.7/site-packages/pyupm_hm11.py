# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_hm11', [dirname(__file__)])
        except ImportError:
            import _pyupm_hm11
            return _pyupm_hm11
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_hm11', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_hm11 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_hm11
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_hm11.HM11_DEFAULT_UART_swigconstant(_pyupm_hm11)
HM11_DEFAULT_UART = _pyupm_hm11.HM11_DEFAULT_UART
class HM11(_object):
    """Proxy of C++ upm::HM11 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HM11, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HM11, name)
    __repr__ = _swig_repr

    def __init__(self, uart):
        """
        __init__(upm::HM11 self, int uart) -> HM11

        Parameters:
            uart: int

        """
        this = _pyupm_hm11.new_HM11(uart)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hm11.delete_HM11
    __del__ = lambda self: None

    def dataAvailable(self, millis):
        """
        dataAvailable(HM11 self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int

        """
        return _pyupm_hm11.HM11_dataAvailable(self, millis)


    def readData(self, buffer, len):
        """
        readData(HM11 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_hm11.HM11_readData(self, buffer, len)


    def writeData(self, buffer, len):
        """
        writeData(HM11 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int

        """
        return _pyupm_hm11.HM11_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(HM11 self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(HM11 self) -> bool

        Parameters:
            self: upm::HM11 *

        """
        return _pyupm_hm11.HM11_setupTty(self, *args)

HM11_swigregister = _pyupm_hm11.HM11_swigregister
HM11_swigregister(HM11)

class charArray(_object):
    """Proxy of C++ charArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        """
        __init__(charArray self, size_t nelements) -> charArray

        Parameters:
            nelements: size_t

        """
        this = _pyupm_hm11.new_charArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_hm11.delete_charArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        """
        __getitem__(charArray self, size_t index) -> char

        Parameters:
            index: size_t

        """
        return _pyupm_hm11.charArray___getitem__(self, index)


    def __setitem__(self, index, value):
        """
        __setitem__(charArray self, size_t index, char value)

        Parameters:
            index: size_t
            value: char

        """
        return _pyupm_hm11.charArray___setitem__(self, index, value)


    def cast(self):
        """
        cast(charArray self) -> char *

        Parameters:
            self: charArray *

        """
        return _pyupm_hm11.charArray_cast(self)


    def frompointer(t):
        """
        frompointer(char * t) -> charArray

        Parameters:
            t: char *

        """
        return _pyupm_hm11.charArray_frompointer(t)

    if _newclass:
        frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
charArray_swigregister = _pyupm_hm11.charArray_swigregister
charArray_swigregister(charArray)
cvar = _pyupm_hm11.cvar

def charArray_frompointer(t):
    """
    charArray_frompointer(char * t) -> charArray

    Parameters:
        t: char *

    """
    return _pyupm_hm11.charArray_frompointer(t)

# This file is compatible with both classic and new-style classes.


