# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_otp538u', [dirname(__file__)])
        except ImportError:
            import _pyupm_otp538u
            return _pyupm_otp538u
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_otp538u', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_otp538u = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_otp538u
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class OTP538U(_object):
    """Proxy of C++ upm::OTP538U class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTP538U, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTP538U, name)
    __repr__ = _swig_repr

    def __init__(self, pinA, pinO, aref=5.0):
        """
        __init__(upm::OTP538U self, int pinA, int pinO, float aref=5.0) -> OTP538U

        Parameters:
            pinA: int
            pinO: int
            aref: float

        __init__(upm::OTP538U self, int pinA, int pinO) -> OTP538U

        Parameters:
            pinA: int
            pinO: int

        """
        this = _pyupm_otp538u.new_OTP538U(pinA, pinO, aref)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_otp538u.delete_OTP538U
    __del__ = lambda self: None

    def ambientTemperature(self):
        """
        ambientTemperature(OTP538U self) -> float

        Parameters:
            self: upm::OTP538U *

        """
        return _pyupm_otp538u.OTP538U_ambientTemperature(self)


    def objectTemperature(self):
        """
        objectTemperature(OTP538U self) -> float

        Parameters:
            self: upm::OTP538U *

        """
        return _pyupm_otp538u.OTP538U_objectTemperature(self)


    def setVoltageOffset(self, vOffset):
        """
        setVoltageOffset(OTP538U self, float vOffset)

        Parameters:
            vOffset: float

        """
        return _pyupm_otp538u.OTP538U_setVoltageOffset(self, vOffset)


    def setOutputResistence(self, outResistance):
        """
        setOutputResistence(OTP538U self, int outResistance)

        Parameters:
            outResistance: int

        """
        return _pyupm_otp538u.OTP538U_setOutputResistence(self, outResistance)


    def setVRef(self, vref):
        """
        setVRef(OTP538U self, float vref)

        Parameters:
            vref: float

        """
        return _pyupm_otp538u.OTP538U_setVRef(self, vref)

OTP538U_swigregister = _pyupm_otp538u.OTP538U_swigregister
OTP538U_swigregister(OTP538U)

# This file is compatible with both classic and new-style classes.


