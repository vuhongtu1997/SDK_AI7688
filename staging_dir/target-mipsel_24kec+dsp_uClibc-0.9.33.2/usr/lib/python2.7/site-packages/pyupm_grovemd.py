# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovemd', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovemd
            return _pyupm_grovemd
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovemd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovemd = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovemd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_grovemd.GROVEMD_I2C_BUS_swigconstant(_pyupm_grovemd)
GROVEMD_I2C_BUS = _pyupm_grovemd.GROVEMD_I2C_BUS

_pyupm_grovemd.GROVEMD_DEFAULT_I2C_ADDR_swigconstant(_pyupm_grovemd)
GROVEMD_DEFAULT_I2C_ADDR = _pyupm_grovemd.GROVEMD_DEFAULT_I2C_ADDR
class GroveMD(_object):
    """Proxy of C++ upm::GroveMD class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveMD, name)
    __repr__ = _swig_repr
    SET_SPEED = _pyupm_grovemd.GroveMD_SET_SPEED
    SET_PWM_FREQ = _pyupm_grovemd.GroveMD_SET_PWM_FREQ
    SET_DIRECTION = _pyupm_grovemd.GroveMD_SET_DIRECTION
    SET_MOTOR_A = _pyupm_grovemd.GroveMD_SET_MOTOR_A
    SET_MOTOR_B = _pyupm_grovemd.GroveMD_SET_MOTOR_B
    STEPPER_ENABLE = _pyupm_grovemd.GroveMD_STEPPER_ENABLE
    STEPPER_DISABLE = _pyupm_grovemd.GroveMD_STEPPER_DISABLE
    STEPPER_NUM_STEPS = _pyupm_grovemd.GroveMD_STEPPER_NUM_STEPS
    STEP_DIR_CCW = _pyupm_grovemd.GroveMD_STEP_DIR_CCW
    STEP_DIR_CW = _pyupm_grovemd.GroveMD_STEP_DIR_CW
    DIR_CCW = _pyupm_grovemd.GroveMD_DIR_CCW
    DIR_CW = _pyupm_grovemd.GroveMD_DIR_CW
    STEP_MODE1 = _pyupm_grovemd.GroveMD_STEP_MODE1
    STEP_MODE2 = _pyupm_grovemd.GroveMD_STEP_MODE2

    def __init__(self, bus=0, address=0x0f):
        """
        __init__(upm::GroveMD self, int bus=0, uint8_t address=0x0f) -> GroveMD

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::GroveMD self, int bus=0) -> GroveMD

        Parameters:
            bus: int

        __init__(upm::GroveMD self) -> GroveMD
        """
        this = _pyupm_grovemd.new_GroveMD(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grovemd.delete_GroveMD
    __del__ = lambda self: None

    def writePacket(self, reg, data1, data2):
        """
        writePacket(GroveMD self, upm::GroveMD::REG_T reg, uint8_t data1, uint8_t data2) -> bool

        Parameters:
            reg: enum upm::GroveMD::REG_T
            data1: uint8_t
            data2: uint8_t

        """
        return _pyupm_grovemd.GroveMD_writePacket(self, reg, data1, data2)


    def setMotorSpeeds(self, speedA, speedB):
        """
        setMotorSpeeds(GroveMD self, uint8_t speedA, uint8_t speedB) -> bool

        Parameters:
            speedA: uint8_t
            speedB: uint8_t

        """
        return _pyupm_grovemd.GroveMD_setMotorSpeeds(self, speedA, speedB)


    def setPWMFrequencyPrescale(self, freq=0x03):
        """
        setPWMFrequencyPrescale(GroveMD self, uint8_t freq=0x03) -> bool

        Parameters:
            freq: uint8_t

        setPWMFrequencyPrescale(GroveMD self) -> bool

        Parameters:
            self: upm::GroveMD *

        """
        return _pyupm_grovemd.GroveMD_setPWMFrequencyPrescale(self, freq)


    def setMotorDirections(self, dirA, dirB):
        """
        setMotorDirections(GroveMD self, upm::GroveMD::DC_DIRECTION_T dirA, upm::GroveMD::DC_DIRECTION_T dirB) -> bool

        Parameters:
            dirA: enum upm::GroveMD::DC_DIRECTION_T
            dirB: enum upm::GroveMD::DC_DIRECTION_T

        """
        return _pyupm_grovemd.GroveMD_setMotorDirections(self, dirA, dirB)


    def enableStepper(self, dir, speed):
        """
        enableStepper(GroveMD self, upm::GroveMD::STEP_DIRECTION_T dir, uint8_t speed) -> bool

        Parameters:
            dir: enum upm::GroveMD::STEP_DIRECTION_T
            speed: uint8_t

        """
        return _pyupm_grovemd.GroveMD_enableStepper(self, dir, speed)


    def disableStepper(self):
        """
        disableStepper(GroveMD self) -> bool

        Parameters:
            self: upm::GroveMD *

        """
        return _pyupm_grovemd.GroveMD_disableStepper(self)


    def setStepperSteps(self, steps):
        """
        setStepperSteps(GroveMD self, unsigned int steps) -> bool

        Parameters:
            steps: unsigned int

        """
        return _pyupm_grovemd.GroveMD_setStepperSteps(self, steps)


    def configStepper(self, *args):
        """
        configStepper(GroveMD self, unsigned int stepsPerRev, upm::GroveMD::STEP_MODE_T mode)

        Parameters:
            stepsPerRev: unsigned int
            mode: enum upm::GroveMD::STEP_MODE_T

        configStepper(GroveMD self, unsigned int stepsPerRev)

        Parameters:
            stepsPerRev: unsigned int

        """
        return _pyupm_grovemd.GroveMD_configStepper(self, *args)

GroveMD_swigregister = _pyupm_grovemd.GroveMD_swigregister
GroveMD_swigregister(GroveMD)

# This file is compatible with both classic and new-style classes.


