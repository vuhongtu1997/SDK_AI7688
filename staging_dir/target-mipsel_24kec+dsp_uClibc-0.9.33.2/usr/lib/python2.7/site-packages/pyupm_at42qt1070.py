# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_at42qt1070', [dirname(__file__)])
        except ImportError:
            import _pyupm_at42qt1070
            return _pyupm_at42qt1070
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_at42qt1070', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_at42qt1070 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_at42qt1070
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_at42qt1070.AT42QT1070_I2C_BUS_swigconstant(_pyupm_at42qt1070)
AT42QT1070_I2C_BUS = _pyupm_at42qt1070.AT42QT1070_I2C_BUS

_pyupm_at42qt1070.AT42QT1070_DEFAULT_I2C_ADDR_swigconstant(_pyupm_at42qt1070)
AT42QT1070_DEFAULT_I2C_ADDR = _pyupm_at42qt1070.AT42QT1070_DEFAULT_I2C_ADDR
class AT42QT1070(_object):
    """Proxy of C++ upm::AT42QT1070 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AT42QT1070, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AT42QT1070, name)
    __repr__ = _swig_repr
    REG_CHIPID = _pyupm_at42qt1070.AT42QT1070_REG_CHIPID
    REG_FWVERS = _pyupm_at42qt1070.AT42QT1070_REG_FWVERS
    REG_DETSTATUS = _pyupm_at42qt1070.AT42QT1070_REG_DETSTATUS
    REG_KEYSTATUS = _pyupm_at42qt1070.AT42QT1070_REG_KEYSTATUS
    REG_KEYSIG0_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG0_H
    REG_KEYSIG0_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG0_L
    REG_KEYSIG1_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG1_H
    REG_KEYSIG1_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG1_L
    REG_KEYSIG2_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG2_H
    REG_KEYSIG2_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG2_L
    REG_KEYSIG3_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG3_H
    REG_KEYSIG3_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG3_L
    REG_KEYSIG4_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG4_H
    REG_KEYSIG4_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG4_L
    REG_KEYSIG5_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG5_H
    REG_KEYSIG5_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG5_L
    REG_KEYSIG6_H = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG6_H
    REG_KEYSIG6_L = _pyupm_at42qt1070.AT42QT1070_REG_KEYSIG6_L
    REG_REFDATA0_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA0_H
    REG_REFDATA0_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA0_L
    REG_REFDATA1_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA1_H
    REG_REFDATA1_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA1_L
    REG_REFDATA2_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA2_H
    REG_REFDATA2_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA2_L
    REG_REFDATA3_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA3_H
    REG_REFDATA3_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA3_L
    REG_REFDATA4_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA4_H
    REG_REFDATA4_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA4_L
    REG_REFDATA5_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA5_H
    REG_REFDATA5_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA5_L
    REG_REFDATA6_H = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA6_H
    REG_REFDATA6_L = _pyupm_at42qt1070.AT42QT1070_REG_REFDATA6_L
    REG_NTHR0 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR0
    REG_NTHR1 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR1
    REG_NTHR2 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR2
    REG_NTHR3 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR3
    REG_NTHR4 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR4
    REG_NTHR5 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR5
    REG_NTHR6 = _pyupm_at42qt1070.AT42QT1070_REG_NTHR6
    REG_AVE0 = _pyupm_at42qt1070.AT42QT1070_REG_AVE0
    REG_AVE1 = _pyupm_at42qt1070.AT42QT1070_REG_AVE1
    REG_AVE2 = _pyupm_at42qt1070.AT42QT1070_REG_AVE2
    REG_AVE3 = _pyupm_at42qt1070.AT42QT1070_REG_AVE3
    REG_AVE4 = _pyupm_at42qt1070.AT42QT1070_REG_AVE4
    REG_AVE5 = _pyupm_at42qt1070.AT42QT1070_REG_AVE5
    REG_AVE6 = _pyupm_at42qt1070.AT42QT1070_REG_AVE6
    REG_DI0 = _pyupm_at42qt1070.AT42QT1070_REG_DI0
    REG_DI1 = _pyupm_at42qt1070.AT42QT1070_REG_DI1
    REG_DI2 = _pyupm_at42qt1070.AT42QT1070_REG_DI2
    REG_DI3 = _pyupm_at42qt1070.AT42QT1070_REG_DI3
    REG_DI4 = _pyupm_at42qt1070.AT42QT1070_REG_DI4
    REG_DI5 = _pyupm_at42qt1070.AT42QT1070_REG_DI5
    REG_DI6 = _pyupm_at42qt1070.AT42QT1070_REG_DI6
    REG_GUARD = _pyupm_at42qt1070.AT42QT1070_REG_GUARD
    REG_LP = _pyupm_at42qt1070.AT42QT1070_REG_LP
    REG_MAXON = _pyupm_at42qt1070.AT42QT1070_REG_MAXON
    REG_CALIBRATE = _pyupm_at42qt1070.AT42QT1070_REG_CALIBRATE
    REG_RESET = _pyupm_at42qt1070.AT42QT1070_REG_RESET
    DET_TOUCH = _pyupm_at42qt1070.AT42QT1070_DET_TOUCH
    DET_OVERFLOW = _pyupm_at42qt1070.AT42QT1070_DET_OVERFLOW
    DET_CALIBRATE = _pyupm_at42qt1070.AT42QT1070_DET_CALIBRATE

    def __init__(self, bus, address=0x1b):
        """
        __init__(upm::AT42QT1070 self, int bus, uint8_t address=0x1b) -> AT42QT1070

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::AT42QT1070 self, int bus) -> AT42QT1070

        Parameters:
            bus: int

        """
        this = _pyupm_at42qt1070.new_AT42QT1070(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_at42qt1070.delete_AT42QT1070
    __del__ = lambda self: None

    def writeByte(self, reg, byte):
        """
        writeByte(AT42QT1070 self, uint8_t reg, uint8_t byte) -> bool

        Parameters:
            reg: uint8_t
            byte: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_writeByte(self, reg, byte)


    def writeWord(self, reg, word):
        """
        writeWord(AT42QT1070 self, uint8_t reg, uint16_t word) -> bool

        Parameters:
            reg: uint8_t
            word: uint16_t

        """
        return _pyupm_at42qt1070.AT42QT1070_writeWord(self, reg, word)


    def readByte(self, reg):
        """
        readByte(AT42QT1070 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_readByte(self, reg)


    def readWord(self, reg):
        """
        readWord(AT42QT1070 self, uint8_t reg) -> uint16_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_readWord(self, reg)


    def readChipID(self):
        """
        readChipID(AT42QT1070 self) -> uint8_t

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_readChipID(self)


    def updateState(self):
        """
        updateState(AT42QT1070 self)

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_updateState(self)


    def getLPMode(self):
        """
        getLPMode(AT42QT1070 self) -> uint8_t

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_getLPMode(self)


    def setLPMode(self, mode):
        """
        setLPMode(AT42QT1070 self, uint8_t mode) -> uint8_t

        Parameters:
            mode: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_setLPMode(self, mode)


    def getAVE(self, key):
        """
        getAVE(AT42QT1070 self, uint8_t key) -> uint8_t

        Parameters:
            key: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_getAVE(self, key)


    def setAVE(self, key, ave):
        """
        setAVE(AT42QT1070 self, uint8_t key, uint8_t ave) -> uint8_t

        Parameters:
            key: uint8_t
            ave: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_setAVE(self, key, ave)


    def getAKSGroup(self, key):
        """
        getAKSGroup(AT42QT1070 self, uint8_t key) -> uint8_t

        Parameters:
            key: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_getAKSGroup(self, key)


    def setAKSGroup(self, key, group):
        """
        setAKSGroup(AT42QT1070 self, uint8_t key, uint8_t group) -> uint8_t

        Parameters:
            key: uint8_t
            group: uint8_t

        """
        return _pyupm_at42qt1070.AT42QT1070_setAKSGroup(self, key, group)


    def isOverflowed(self):
        """
        isOverflowed(AT42QT1070 self) -> bool

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_isOverflowed(self)


    def isCalibrating(self):
        """
        isCalibrating(AT42QT1070 self) -> bool

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_isCalibrating(self)


    def reset(self):
        """
        reset(AT42QT1070 self) -> bool

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_reset(self)


    def calibrate(self):
        """
        calibrate(AT42QT1070 self) -> bool

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_calibrate(self)


    def getButtons(self):
        """
        getButtons(AT42QT1070 self) -> uint8_t

        Parameters:
            self: upm::AT42QT1070 *

        """
        return _pyupm_at42qt1070.AT42QT1070_getButtons(self)

AT42QT1070_swigregister = _pyupm_at42qt1070.AT42QT1070_swigregister
AT42QT1070_swigregister(AT42QT1070)

# This file is compatible with both classic and new-style classes.


