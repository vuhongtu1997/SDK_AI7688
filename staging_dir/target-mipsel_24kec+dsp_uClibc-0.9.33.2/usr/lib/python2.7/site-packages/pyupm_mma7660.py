# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mma7660', [dirname(__file__)])
        except ImportError:
            import _pyupm_mma7660
            return _pyupm_mma7660
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mma7660', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mma7660 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mma7660
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intp():
    return _pyupm_mma7660.new_intp()
new_intp = _pyupm_mma7660.new_intp

def copy_intp(value):
    return _pyupm_mma7660.copy_intp(value)
copy_intp = _pyupm_mma7660.copy_intp

def delete_intp(obj):
    return _pyupm_mma7660.delete_intp(obj)
delete_intp = _pyupm_mma7660.delete_intp

def intp_assign(obj, value):
    return _pyupm_mma7660.intp_assign(obj, value)
intp_assign = _pyupm_mma7660.intp_assign

def intp_value(obj):
    return _pyupm_mma7660.intp_value(obj)
intp_value = _pyupm_mma7660.intp_value

def new_floatp():
    return _pyupm_mma7660.new_floatp()
new_floatp = _pyupm_mma7660.new_floatp

def copy_floatp(value):
    return _pyupm_mma7660.copy_floatp(value)
copy_floatp = _pyupm_mma7660.copy_floatp

def delete_floatp(obj):
    return _pyupm_mma7660.delete_floatp(obj)
delete_floatp = _pyupm_mma7660.delete_floatp

def floatp_assign(obj, value):
    return _pyupm_mma7660.floatp_assign(obj, value)
floatp_assign = _pyupm_mma7660.floatp_assign

def floatp_value(obj):
    return _pyupm_mma7660.floatp_value(obj)
floatp_value = _pyupm_mma7660.floatp_value

_pyupm_mma7660.MMA7660_I2C_BUS_swigconstant(_pyupm_mma7660)
MMA7660_I2C_BUS = _pyupm_mma7660.MMA7660_I2C_BUS

_pyupm_mma7660.MMA7660_DEFAULT_I2C_ADDR_swigconstant(_pyupm_mma7660)
MMA7660_DEFAULT_I2C_ADDR = _pyupm_mma7660.MMA7660_DEFAULT_I2C_ADDR
class MMA7660(_object):
    """Proxy of C++ upm::MMA7660 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMA7660, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMA7660, name)
    __repr__ = _swig_repr
    REG_XOUT = _pyupm_mma7660.MMA7660_REG_XOUT
    REG_YOUT = _pyupm_mma7660.MMA7660_REG_YOUT
    REG_ZOUT = _pyupm_mma7660.MMA7660_REG_ZOUT
    REG_TILT = _pyupm_mma7660.MMA7660_REG_TILT
    REG_SRST = _pyupm_mma7660.MMA7660_REG_SRST
    REG_SPCNT = _pyupm_mma7660.MMA7660_REG_SPCNT
    REG_INTSU = _pyupm_mma7660.MMA7660_REG_INTSU
    REG_MODE = _pyupm_mma7660.MMA7660_REG_MODE
    REG_SR = _pyupm_mma7660.MMA7660_REG_SR
    REG_PDET = _pyupm_mma7660.MMA7660_REG_PDET
    REG_PD = _pyupm_mma7660.MMA7660_REG_PD
    INTR_NONE = _pyupm_mma7660.MMA7660_INTR_NONE
    INTR_FBINT = _pyupm_mma7660.MMA7660_INTR_FBINT
    INTR_PLINT = _pyupm_mma7660.MMA7660_INTR_PLINT
    INTR_PDINT = _pyupm_mma7660.MMA7660_INTR_PDINT
    INTR_ASINT = _pyupm_mma7660.MMA7660_INTR_ASINT
    INTR_GINT = _pyupm_mma7660.MMA7660_INTR_GINT
    INTR_SHINTZ = _pyupm_mma7660.MMA7660_INTR_SHINTZ
    INTR_SHINTY = _pyupm_mma7660.MMA7660_INTR_SHINTY
    INTR_SHINTX = _pyupm_mma7660.MMA7660_INTR_SHINTX
    MODE_MODE = _pyupm_mma7660.MMA7660_MODE_MODE
    MODE_TON = _pyupm_mma7660.MMA7660_MODE_TON
    MODE_AWE = _pyupm_mma7660.MMA7660_MODE_AWE
    MODE_ASE = _pyupm_mma7660.MMA7660_MODE_ASE
    MODE_SCPS = _pyupm_mma7660.MMA7660_MODE_SCPS
    MODE_IPP = _pyupm_mma7660.MMA7660_MODE_IPP
    MODE_IAH = _pyupm_mma7660.MMA7660_MODE_IAH
    BF_UNKNOWN = _pyupm_mma7660.MMA7660_BF_UNKNOWN
    BF_LYING_FRONT = _pyupm_mma7660.MMA7660_BF_LYING_FRONT
    BF_LYING_BACK = _pyupm_mma7660.MMA7660_BF_LYING_BACK
    LP_UNKNOWN = _pyupm_mma7660.MMA7660_LP_UNKNOWN
    LP_LANDSCAPE_LEFT = _pyupm_mma7660.MMA7660_LP_LANDSCAPE_LEFT
    LP_LANDSCAPE_RIGHT = _pyupm_mma7660.MMA7660_LP_LANDSCAPE_RIGHT
    LP_VERT_DOWN = _pyupm_mma7660.MMA7660_LP_VERT_DOWN
    LP_VERT_UP = _pyupm_mma7660.MMA7660_LP_VERT_UP
    AUTOSLEEP_120 = _pyupm_mma7660.MMA7660_AUTOSLEEP_120
    AUTOSLEEP_64 = _pyupm_mma7660.MMA7660_AUTOSLEEP_64
    AUTOSLEEP_32 = _pyupm_mma7660.MMA7660_AUTOSLEEP_32
    AUTOSLEEP_16 = _pyupm_mma7660.MMA7660_AUTOSLEEP_16
    AUTOSLEEP_8 = _pyupm_mma7660.MMA7660_AUTOSLEEP_8
    AUTOSLEEP_4 = _pyupm_mma7660.MMA7660_AUTOSLEEP_4
    AUTOSLEEP_2 = _pyupm_mma7660.MMA7660_AUTOSLEEP_2
    AUTOSLEEP_1 = _pyupm_mma7660.MMA7660_AUTOSLEEP_1

    def __init__(self, bus, address=0x4c):
        """
        __init__(upm::MMA7660 self, int bus, uint8_t address=0x4c) -> MMA7660

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::MMA7660 self, int bus) -> MMA7660

        Parameters:
            bus: int

        """
        this = _pyupm_mma7660.new_MMA7660(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mma7660.delete_MMA7660
    __del__ = lambda self: None

    def writeByte(self, reg, byte):
        """
        writeByte(MMA7660 self, uint8_t reg, uint8_t byte) -> bool

        Parameters:
            reg: uint8_t
            byte: uint8_t

        """
        return _pyupm_mma7660.MMA7660_writeByte(self, reg, byte)


    def readByte(self, reg):
        """
        readByte(MMA7660 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_mma7660.MMA7660_readByte(self, reg)


    def getRawValues(self, x, y, z):
        """
        getRawValues(MMA7660 self, int * x, int * y, int * z)

        Parameters:
            x: int *
            y: int *
            z: int *

        """
        return _pyupm_mma7660.MMA7660_getRawValues(self, x, y, z)


    def getAcceleration(self, ax, ay, az):
        """
        getAcceleration(MMA7660 self, float * ax, float * ay, float * az)

        Parameters:
            ax: float *
            ay: float *
            az: float *

        """
        return _pyupm_mma7660.MMA7660_getAcceleration(self, ax, ay, az)


    def getVerifiedAxis(self, axis):
        """
        getVerifiedAxis(MMA7660 self, upm::MMA7660::MMA7660_REG_T axis) -> int

        Parameters:
            axis: enum upm::MMA7660::MMA7660_REG_T

        """
        return _pyupm_mma7660.MMA7660_getVerifiedAxis(self, axis)


    def getVerifiedTilt(self):
        """
        getVerifiedTilt(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_getVerifiedTilt(self)


    def setModeActive(self):
        """
        setModeActive(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_setModeActive(self)


    def setModeStandby(self):
        """
        setModeStandby(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_setModeStandby(self)


    def tiltBackFront(self):
        """
        tiltBackFront(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_tiltBackFront(self)


    def tiltLandscapePortrait(self):
        """
        tiltLandscapePortrait(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_tiltLandscapePortrait(self)


    def tiltTap(self):
        """
        tiltTap(MMA7660 self) -> bool

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_tiltTap(self)


    def tiltShake(self):
        """
        tiltShake(MMA7660 self) -> bool

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_tiltShake(self)


    def installISR(self, pin, isr, arg):
        """
        installISR(MMA7660 self, int pin, void (*)(void *) isr, void * arg)

        Parameters:
            pin: int
            isr: void (*)(void *)
            arg: void *

        """
        return _pyupm_mma7660.MMA7660_installISR(self, pin, isr, arg)


    def uninstallISR(self):
        """
        uninstallISR(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *

        """
        return _pyupm_mma7660.MMA7660_uninstallISR(self)


    def setInterruptBits(self, ibits):
        """
        setInterruptBits(MMA7660 self, uint8_t ibits) -> bool

        Parameters:
            ibits: uint8_t

        """
        return _pyupm_mma7660.MMA7660_setInterruptBits(self, ibits)


    def setSampleRate(self, sr):
        """
        setSampleRate(MMA7660 self, upm::MMA7660::MMA7660_AUTOSLEEP_T sr) -> bool

        Parameters:
            sr: enum upm::MMA7660::MMA7660_AUTOSLEEP_T

        """
        return _pyupm_mma7660.MMA7660_setSampleRate(self, sr)

MMA7660_swigregister = _pyupm_mma7660.MMA7660_swigregister
MMA7660_swigregister(MMA7660)

# This file is compatible with both classic and new-style classes.


