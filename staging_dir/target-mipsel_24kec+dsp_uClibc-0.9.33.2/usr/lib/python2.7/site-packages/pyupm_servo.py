# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_servo', [dirname(__file__)])
        except ImportError:
            import _pyupm_servo
            return _pyupm_servo
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_servo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_servo = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_servo
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_servo.MIN_PULSE_WIDTH_swigconstant(_pyupm_servo)
MIN_PULSE_WIDTH = _pyupm_servo.MIN_PULSE_WIDTH

_pyupm_servo.MAX_PULSE_WIDTH_swigconstant(_pyupm_servo)
MAX_PULSE_WIDTH = _pyupm_servo.MAX_PULSE_WIDTH

_pyupm_servo.PERIOD_swigconstant(_pyupm_servo)
PERIOD = _pyupm_servo.PERIOD

_pyupm_servo.HIGH_swigconstant(_pyupm_servo)
HIGH = _pyupm_servo.HIGH

_pyupm_servo.LOW_swigconstant(_pyupm_servo)
LOW = _pyupm_servo.LOW

_pyupm_servo.DEFAULT_WAIT_DISABLE_PWM_swigconstant(_pyupm_servo)
DEFAULT_WAIT_DISABLE_PWM = _pyupm_servo.DEFAULT_WAIT_DISABLE_PWM
class Servo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Servo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Servo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyupm_servo.new_Servo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_servo.delete_Servo
    __del__ = lambda self: None

    def setAngle(self, angle):
        return _pyupm_servo.Servo_setAngle(self, angle)

    def haltPwm(self):
        return _pyupm_servo.Servo_haltPwm(self)

    def name(self):
        return _pyupm_servo.Servo_name(self)

    def setMinPulseWidth(self, width):
        return _pyupm_servo.Servo_setMinPulseWidth(self, width)

    def setMaxPulseWidth(self, width):
        return _pyupm_servo.Servo_setMaxPulseWidth(self, width)

    def setPeriod(self, period):
        return _pyupm_servo.Servo_setPeriod(self, period)

    def getMinPulseWidth(self):
        return _pyupm_servo.Servo_getMinPulseWidth(self)

    def getMaxPulseWidth(self):
        return _pyupm_servo.Servo_getMaxPulseWidth(self)

    def getPeriod(self):
        return _pyupm_servo.Servo_getPeriod(self)
Servo_swigregister = _pyupm_servo.Servo_swigregister
Servo_swigregister(Servo)

class ES08A(Servo):
    __swig_setmethods__ = {}
    for _s in [Servo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ES08A, name, value)
    __swig_getmethods__ = {}
    for _s in [Servo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ES08A, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        this = _pyupm_servo.new_ES08A(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_servo.delete_ES08A
    __del__ = lambda self: None
ES08A_swigregister = _pyupm_servo.ES08A_swigregister
ES08A_swigregister(ES08A)

class ES9257(Servo):
    __swig_setmethods__ = {}
    for _s in [Servo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ES9257, name, value)
    __swig_getmethods__ = {}
    for _s in [Servo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ES9257, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        this = _pyupm_servo.new_ES9257(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_servo.delete_ES9257
    __del__ = lambda self: None
ES9257_swigregister = _pyupm_servo.ES9257_swigregister
ES9257_swigregister(ES9257)

# This file is compatible with both classic and new-style classes.


