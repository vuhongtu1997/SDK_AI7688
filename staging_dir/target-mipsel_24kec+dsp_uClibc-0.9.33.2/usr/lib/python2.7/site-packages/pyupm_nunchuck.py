# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_nunchuck', [dirname(__file__)])
        except ImportError:
            import _pyupm_nunchuck
            return _pyupm_nunchuck
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_nunchuck', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_nunchuck = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_nunchuck
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_nunchuck.NUNCHUCK_I2C_ADDR_swigconstant(_pyupm_nunchuck)
NUNCHUCK_I2C_ADDR = _pyupm_nunchuck.NUNCHUCK_I2C_ADDR
class NUNCHUCK(_object):
    """Proxy of C++ upm::NUNCHUCK class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NUNCHUCK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NUNCHUCK, name)
    __repr__ = _swig_repr

    def __init__(self, bus, addr=0x52):
        """
        __init__(upm::NUNCHUCK self, int bus, uint8_t addr=0x52) -> NUNCHUCK

        Parameters:
            bus: int
            addr: uint8_t

        __init__(upm::NUNCHUCK self, int bus) -> NUNCHUCK

        Parameters:
            bus: int

        """
        this = _pyupm_nunchuck.new_NUNCHUCK(bus, addr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_nunchuck.delete_NUNCHUCK
    __del__ = lambda self: None

    def writeByte(self, reg, byte):
        """
        writeByte(NUNCHUCK self, uint8_t reg, uint8_t byte) -> bool

        Parameters:
            reg: uint8_t
            byte: uint8_t

        """
        return _pyupm_nunchuck.NUNCHUCK_writeByte(self, reg, byte)


    def readBytes(self, reg, buffer, len):
        """
        readBytes(NUNCHUCK self, uint8_t reg, uint8_t * buffer, int len) -> int

        Parameters:
            reg: uint8_t
            buffer: uint8_t *
            len: int

        """
        return _pyupm_nunchuck.NUNCHUCK_readBytes(self, reg, buffer, len)


    def init(self):
        """
        init(NUNCHUCK self) -> bool

        Parameters:
            self: upm::NUNCHUCK *

        """
        return _pyupm_nunchuck.NUNCHUCK_init(self)


    def update(self):
        """
        update(NUNCHUCK self)

        Parameters:
            self: upm::NUNCHUCK *

        """
        return _pyupm_nunchuck.NUNCHUCK_update(self)

    __swig_setmethods__["stickX"] = _pyupm_nunchuck.NUNCHUCK_stickX_set
    __swig_getmethods__["stickX"] = _pyupm_nunchuck.NUNCHUCK_stickX_get
    if _newclass:
        stickX = _swig_property(_pyupm_nunchuck.NUNCHUCK_stickX_get, _pyupm_nunchuck.NUNCHUCK_stickX_set)
    __swig_setmethods__["stickY"] = _pyupm_nunchuck.NUNCHUCK_stickY_set
    __swig_getmethods__["stickY"] = _pyupm_nunchuck.NUNCHUCK_stickY_get
    if _newclass:
        stickY = _swig_property(_pyupm_nunchuck.NUNCHUCK_stickY_get, _pyupm_nunchuck.NUNCHUCK_stickY_set)
    __swig_setmethods__["accelX"] = _pyupm_nunchuck.NUNCHUCK_accelX_set
    __swig_getmethods__["accelX"] = _pyupm_nunchuck.NUNCHUCK_accelX_get
    if _newclass:
        accelX = _swig_property(_pyupm_nunchuck.NUNCHUCK_accelX_get, _pyupm_nunchuck.NUNCHUCK_accelX_set)
    __swig_setmethods__["accelY"] = _pyupm_nunchuck.NUNCHUCK_accelY_set
    __swig_getmethods__["accelY"] = _pyupm_nunchuck.NUNCHUCK_accelY_get
    if _newclass:
        accelY = _swig_property(_pyupm_nunchuck.NUNCHUCK_accelY_get, _pyupm_nunchuck.NUNCHUCK_accelY_set)
    __swig_setmethods__["accelZ"] = _pyupm_nunchuck.NUNCHUCK_accelZ_set
    __swig_getmethods__["accelZ"] = _pyupm_nunchuck.NUNCHUCK_accelZ_get
    if _newclass:
        accelZ = _swig_property(_pyupm_nunchuck.NUNCHUCK_accelZ_get, _pyupm_nunchuck.NUNCHUCK_accelZ_set)
    __swig_setmethods__["buttonC"] = _pyupm_nunchuck.NUNCHUCK_buttonC_set
    __swig_getmethods__["buttonC"] = _pyupm_nunchuck.NUNCHUCK_buttonC_get
    if _newclass:
        buttonC = _swig_property(_pyupm_nunchuck.NUNCHUCK_buttonC_get, _pyupm_nunchuck.NUNCHUCK_buttonC_set)
    __swig_setmethods__["buttonZ"] = _pyupm_nunchuck.NUNCHUCK_buttonZ_set
    __swig_getmethods__["buttonZ"] = _pyupm_nunchuck.NUNCHUCK_buttonZ_get
    if _newclass:
        buttonZ = _swig_property(_pyupm_nunchuck.NUNCHUCK_buttonZ_get, _pyupm_nunchuck.NUNCHUCK_buttonZ_set)
NUNCHUCK_swigregister = _pyupm_nunchuck.NUNCHUCK_swigregister
NUNCHUCK_swigregister(NUNCHUCK)

# This file is compatible with both classic and new-style classes.


