# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovescam', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovescam
            return _pyupm_grovescam
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovescam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovescam = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovescam
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_grovescam.GROVESCAM_DEFAULT_UART_swigconstant(_pyupm_grovescam)
GROVESCAM_DEFAULT_UART = _pyupm_grovescam.GROVESCAM_DEFAULT_UART

_pyupm_grovescam.GROVESCAM_DEFAULT_CAMERA_ADDR_swigconstant(_pyupm_grovescam)
GROVESCAM_DEFAULT_CAMERA_ADDR = _pyupm_grovescam.GROVESCAM_DEFAULT_CAMERA_ADDR
class GROVESCAM(_object):
    """Proxy of C++ upm::GROVESCAM class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GROVESCAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GROVESCAM, name)
    __repr__ = _swig_repr
    MAX_PKT_LEN = _pyupm_grovescam.GROVESCAM_MAX_PKT_LEN
    FORMAT_VGA = _pyupm_grovescam.GROVESCAM_FORMAT_VGA
    FORMAT_CIF = _pyupm_grovescam.GROVESCAM_FORMAT_CIF
    FORMAT_OCIF = _pyupm_grovescam.GROVESCAM_FORMAT_OCIF

    def __init__(self, uart, camAddr=0):
        """
        __init__(upm::GROVESCAM self, int uart, uint8_t camAddr=0) -> GROVESCAM

        Parameters:
            uart: int
            camAddr: uint8_t

        __init__(upm::GROVESCAM self, int uart) -> GROVESCAM

        Parameters:
            uart: int

        """
        this = _pyupm_grovescam.new_GROVESCAM(uart, camAddr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grovescam.delete_GROVESCAM
    __del__ = lambda self: None

    def dataAvailable(self, millis):
        """
        dataAvailable(GROVESCAM self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int

        """
        return _pyupm_grovescam.GROVESCAM_dataAvailable(self, millis)


    def readData(self, buffer, len):
        """
        readData(GROVESCAM self, uint8_t * buffer, int len) -> int

        Parameters:
            buffer: uint8_t *
            len: int

        """
        return _pyupm_grovescam.GROVESCAM_readData(self, buffer, len)


    def writeData(self, buffer, len):
        """
        writeData(GROVESCAM self, uint8_t * buffer, int len) -> int

        Parameters:
            buffer: uint8_t *
            len: int

        """
        return _pyupm_grovescam.GROVESCAM_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(GROVESCAM self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(GROVESCAM self) -> bool

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_setupTty(self, *args)


    def drainInput(self):
        """
        drainInput(GROVESCAM self)

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_drainInput(self)


    def init(self):
        """
        init(GROVESCAM self) -> bool

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_init(self)


    def preCapture(self, *args):
        """
        preCapture(GROVESCAM self, upm::GROVESCAM::PIC_FORMATS_T fmt) -> bool

        Parameters:
            fmt: enum upm::GROVESCAM::PIC_FORMATS_T

        preCapture(GROVESCAM self) -> bool

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_preCapture(self, *args)


    def doCapture(self):
        """
        doCapture(GROVESCAM self) -> bool

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_doCapture(self)


    def storeImage(self, fname):
        """
        storeImage(GROVESCAM self, char const * fname) -> bool

        Parameters:
            fname: char const *

        """
        return _pyupm_grovescam.GROVESCAM_storeImage(self, fname)


    def getImageSize(self):
        """
        getImageSize(GROVESCAM self) -> int

        Parameters:
            self: upm::GROVESCAM *

        """
        return _pyupm_grovescam.GROVESCAM_getImageSize(self)

GROVESCAM_swigregister = _pyupm_grovescam.GROVESCAM_swigregister
GROVESCAM_swigregister(GROVESCAM)

# This file is compatible with both classic and new-style classes.


