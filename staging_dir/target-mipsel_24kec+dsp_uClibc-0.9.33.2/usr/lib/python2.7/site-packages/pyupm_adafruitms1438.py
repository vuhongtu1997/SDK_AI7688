# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adafruitms1438', [dirname(__file__)])
        except ImportError:
            import _pyupm_adafruitms1438
            return _pyupm_adafruitms1438
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adafruitms1438', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adafruitms1438 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adafruitms1438
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_adafruitms1438.ADAFRUITMS1438_I2C_BUS_swigconstant(_pyupm_adafruitms1438)
ADAFRUITMS1438_I2C_BUS = _pyupm_adafruitms1438.ADAFRUITMS1438_I2C_BUS

_pyupm_adafruitms1438.ADAFRUITMS1438_DEFAULT_I2C_ADDR_swigconstant(_pyupm_adafruitms1438)
ADAFRUITMS1438_DEFAULT_I2C_ADDR = _pyupm_adafruitms1438.ADAFRUITMS1438_DEFAULT_I2C_ADDR
class AdafruitMS1438(_object):
    """Proxy of C++ upm::AdafruitMS1438 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdafruitMS1438, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdafruitMS1438, name)
    __repr__ = _swig_repr
    DIR_NONE = _pyupm_adafruitms1438.AdafruitMS1438_DIR_NONE
    DIR_CW = _pyupm_adafruitms1438.AdafruitMS1438_DIR_CW
    DIR_CCW = _pyupm_adafruitms1438.AdafruitMS1438_DIR_CCW
    MOTOR_M1 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M1
    MOTOR_M2 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M2
    MOTOR_M3 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M3
    MOTOR_M4 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M4
    STEPMOTOR_M12 = _pyupm_adafruitms1438.AdafruitMS1438_STEPMOTOR_M12
    STEPMOTOR_M34 = _pyupm_adafruitms1438.AdafruitMS1438_STEPMOTOR_M34

    def __init__(self, bus, address=0x60):
        """
        __init__(upm::AdafruitMS1438 self, int bus, uint8_t address=0x60) -> AdafruitMS1438

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::AdafruitMS1438 self, int bus) -> AdafruitMS1438

        Parameters:
            bus: int

        """
        this = _pyupm_adafruitms1438.new_AdafruitMS1438(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adafruitms1438.delete_AdafruitMS1438
    __del__ = lambda self: None

    def getMillis(self, motor):
        """
        getMillis(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor) -> uint32_t

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_getMillis(self, motor)


    def initClock(self, motor):
        """
        initClock(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_initClock(self, motor)


    def setPWMPeriod(self, hz):
        """
        setPWMPeriod(AdafruitMS1438 self, float hz)

        Parameters:
            hz: float

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setPWMPeriod(self, hz)


    def enableMotor(self, motor):
        """
        enableMotor(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_enableMotor(self, motor)


    def disableMotor(self, motor):
        """
        disableMotor(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_disableMotor(self, motor)


    def enableStepper(self, motor):
        """
        enableStepper(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_enableStepper(self, motor)


    def disableStepper(self, motor):
        """
        disableStepper(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_disableStepper(self, motor)


    def setMotorSpeed(self, motor, speed):
        """
        setMotorSpeed(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor, int speed)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T
            speed: int

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setMotorSpeed(self, motor, speed)


    def setStepperSpeed(self, motor, speed):
        """
        setStepperSpeed(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, int speed)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            speed: int

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setStepperSpeed(self, motor, speed)


    def setMotorDirection(self, motor, dir):
        """
        setMotorDirection(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor, upm::AdafruitMS1438::DIRECTION_T dir)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T
            dir: enum upm::AdafruitMS1438::DIRECTION_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setMotorDirection(self, motor, dir)


    def setStepperDirection(self, motor, dir):
        """
        setStepperDirection(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, upm::AdafruitMS1438::DIRECTION_T dir)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            dir: enum upm::AdafruitMS1438::DIRECTION_T

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setStepperDirection(self, motor, dir)


    def stepConfig(self, motor, stepsPerRev):
        """
        stepConfig(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, unsigned int stepsPerRev)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            stepsPerRev: unsigned int

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_stepConfig(self, motor, stepsPerRev)


    def stepperSteps(self, motor, steps):
        """
        stepperSteps(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, unsigned int steps)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            steps: unsigned int

        """
        return _pyupm_adafruitms1438.AdafruitMS1438_stepperSteps(self, motor, steps)

AdafruitMS1438_swigregister = _pyupm_adafruitms1438.AdafruitMS1438_swigregister
AdafruitMS1438_swigregister(AdafruitMS1438)

# This file is compatible with both classic and new-style classes.


