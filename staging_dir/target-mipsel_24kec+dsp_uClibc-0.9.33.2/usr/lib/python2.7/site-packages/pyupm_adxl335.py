# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adxl335', [dirname(__file__)])
        except ImportError:
            import _pyupm_adxl335
            return _pyupm_adxl335
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adxl335', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adxl335 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adxl335
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intPointer():
    return _pyupm_adxl335.new_intPointer()
new_intPointer = _pyupm_adxl335.new_intPointer

def copy_intPointer(value):
    return _pyupm_adxl335.copy_intPointer(value)
copy_intPointer = _pyupm_adxl335.copy_intPointer

def delete_intPointer(obj):
    return _pyupm_adxl335.delete_intPointer(obj)
delete_intPointer = _pyupm_adxl335.delete_intPointer

def intPointer_assign(obj, value):
    return _pyupm_adxl335.intPointer_assign(obj, value)
intPointer_assign = _pyupm_adxl335.intPointer_assign

def intPointer_value(obj):
    return _pyupm_adxl335.intPointer_value(obj)
intPointer_value = _pyupm_adxl335.intPointer_value

def new_floatPointer():
    return _pyupm_adxl335.new_floatPointer()
new_floatPointer = _pyupm_adxl335.new_floatPointer

def copy_floatPointer(value):
    return _pyupm_adxl335.copy_floatPointer(value)
copy_floatPointer = _pyupm_adxl335.copy_floatPointer

def delete_floatPointer(obj):
    return _pyupm_adxl335.delete_floatPointer(obj)
delete_floatPointer = _pyupm_adxl335.delete_floatPointer

def floatPointer_assign(obj, value):
    return _pyupm_adxl335.floatPointer_assign(obj, value)
floatPointer_assign = _pyupm_adxl335.floatPointer_assign

def floatPointer_value(obj):
    return _pyupm_adxl335.floatPointer_value(obj)
floatPointer_value = _pyupm_adxl335.floatPointer_value

_pyupm_adxl335.ADXL335_DEFAULT_AREF_swigconstant(_pyupm_adxl335)
ADXL335_DEFAULT_AREF = _pyupm_adxl335.ADXL335_DEFAULT_AREF

_pyupm_adxl335.ADXL335_SENSITIVITY_swigconstant(_pyupm_adxl335)
ADXL335_SENSITIVITY = _pyupm_adxl335.ADXL335_SENSITIVITY
class ADXL335(_object):
    """Proxy of C++ upm::ADXL335 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADXL335, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADXL335, name)
    __repr__ = _swig_repr

    def __init__(self, pinX, pinY, pinZ, aref=5.0):
        """
        __init__(upm::ADXL335 self, int pinX, int pinY, int pinZ, float aref=5.0) -> ADXL335

        Parameters:
            pinX: int
            pinY: int
            pinZ: int
            aref: float

        __init__(upm::ADXL335 self, int pinX, int pinY, int pinZ) -> ADXL335

        Parameters:
            pinX: int
            pinY: int
            pinZ: int

        """
        this = _pyupm_adxl335.new_ADXL335(pinX, pinY, pinZ, aref)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adxl335.delete_ADXL335
    __del__ = lambda self: None

    def setZeroX(self, zeroX):
        """
        setZeroX(ADXL335 self, float zeroX)

        Parameters:
            zeroX: float

        """
        return _pyupm_adxl335.ADXL335_setZeroX(self, zeroX)


    def setZeroY(self, zeroY):
        """
        setZeroY(ADXL335 self, float zeroY)

        Parameters:
            zeroY: float

        """
        return _pyupm_adxl335.ADXL335_setZeroY(self, zeroY)


    def setZeroZ(self, zeroZ):
        """
        setZeroZ(ADXL335 self, float zeroZ)

        Parameters:
            zeroZ: float

        """
        return _pyupm_adxl335.ADXL335_setZeroZ(self, zeroZ)


    def values(self, xVal, yVal, zVal):
        """
        values(ADXL335 self, int * xVal, int * yVal, int * zVal)

        Parameters:
            xVal: int *
            yVal: int *
            zVal: int *

        """
        return _pyupm_adxl335.ADXL335_values(self, xVal, yVal, zVal)


    def acceleration(self, xAccel, yAccel, zAccel):
        """
        acceleration(ADXL335 self, float * xAccel, float * yAccel, float * zAccel)

        Parameters:
            xAccel: float *
            yAccel: float *
            zAccel: float *

        """
        return _pyupm_adxl335.ADXL335_acceleration(self, xAccel, yAccel, zAccel)


    def calibrate(self):
        """
        calibrate(ADXL335 self)

        Parameters:
            self: upm::ADXL335 *

        """
        return _pyupm_adxl335.ADXL335_calibrate(self)

ADXL335_swigregister = _pyupm_adxl335.ADXL335_swigregister
ADXL335_swigregister(ADXL335)

# This file is compatible with both classic and new-style classes.


