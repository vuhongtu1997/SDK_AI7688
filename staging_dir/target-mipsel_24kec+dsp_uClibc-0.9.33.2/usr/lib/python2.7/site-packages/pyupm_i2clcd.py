# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_i2clcd', [dirname(__file__)])
        except ImportError:
            import _pyupm_i2clcd
            return _pyupm_i2clcd
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_i2clcd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_i2clcd = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_i2clcd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_i2clcd.new_uint8Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_uint8Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_i2clcd.uint8Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_i2clcd.uint8Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_i2clcd.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_i2clcd.uint8Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_i2clcd.uint8Array_frompointer)
uint8Array_swigregister = _pyupm_i2clcd.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(t):
    return _pyupm_i2clcd.uint8Array_frompointer(t)
uint8Array_frompointer = _pyupm_i2clcd.uint8Array_frompointer


_pyupm_i2clcd.HORIZONTAL_swigconstant(_pyupm_i2clcd)
HORIZONTAL = _pyupm_i2clcd.HORIZONTAL

_pyupm_i2clcd.VERTICAL_swigconstant(_pyupm_i2clcd)
VERTICAL = _pyupm_i2clcd.VERTICAL

_pyupm_i2clcd.PAGE_swigconstant(_pyupm_i2clcd)
PAGE = _pyupm_i2clcd.PAGE
class LCD(_object):
    """Proxy of C++ upm::LCD class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LCD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LCD, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyupm_i2clcd.delete_LCD
    __del__ = lambda self: None

    def write(self, *args):
        """
        write(LCD self, int x, int y, std::string msg) -> mraa::Result

        Parameters:
            x: int
            y: int
            msg: std::string

        write(LCD self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.LCD_write(self, *args)


    def setCursor(self, row, column):
        """
        setCursor(LCD self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.LCD_setCursor(self, row, column)


    def clear(self):
        """
        clear(LCD self) -> mraa::Result

        Parameters:
            self: upm::LCD *

        """
        return _pyupm_i2clcd.LCD_clear(self)


    def home(self):
        """
        home(LCD self) -> mraa::Result

        Parameters:
            self: upm::LCD *

        """
        return _pyupm_i2clcd.LCD_home(self)


    def name(self):
        """
        name(LCD self) -> std::string

        Parameters:
            self: upm::LCD *

        """
        return _pyupm_i2clcd.LCD_name(self)

LCD_swigregister = _pyupm_i2clcd.LCD_swigregister
LCD_swigregister(LCD)
cvar = _pyupm_i2clcd.cvar
DISPLAY_CMD_OFF = cvar.DISPLAY_CMD_OFF
DISPLAY_CMD_ON = cvar.DISPLAY_CMD_ON
BASE_LOW_COLUMN_ADDR = cvar.BASE_LOW_COLUMN_ADDR
BASE_HIGH_COLUMN_ADDR = cvar.BASE_HIGH_COLUMN_ADDR
BASE_PAGE_START_ADDR = cvar.BASE_PAGE_START_ADDR
DISPLAY_CMD_MEM_ADDR_MODE = cvar.DISPLAY_CMD_MEM_ADDR_MODE
BasicFont = cvar.BasicFont

class Lcm1602(LCD):
    """Proxy of C++ upm::Lcm1602 class"""
    __swig_setmethods__ = {}
    for _s in [LCD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lcm1602, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lcm1602, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(upm::Lcm1602 self, int bus, int address, bool isExpander=True) -> Lcm1602

        Parameters:
            bus: int
            address: int
            isExpander: bool

        __init__(upm::Lcm1602 self, int bus, int address) -> Lcm1602

        Parameters:
            bus: int
            address: int

        __init__(upm::Lcm1602 self, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) -> Lcm1602

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t

        """
        this = _pyupm_i2clcd.new_Lcm1602(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Lcm1602
    __del__ = lambda self: None

    def write(self, msg):
        """
        write(Lcm1602 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.Lcm1602_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(Lcm1602 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.Lcm1602_setCursor(self, row, column)


    def clear(self):
        """
        clear(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_clear(self)


    def home(self):
        """
        home(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_home(self)


    def createChar(self, charSlot, charData):
        """
        createChar(Lcm1602 self, uint8_t charSlot, uint8_t [] charData) -> mraa::Result

        Parameters:
            charSlot: uint8_t
            charData: uint8_t []

        """
        return _pyupm_i2clcd.Lcm1602_createChar(self, charSlot, charData)


    def displayOn(self):
        """
        displayOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_displayOn(self)


    def displayOff(self):
        """
        displayOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_displayOff(self)


    def cursorOn(self):
        """
        cursorOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_cursorOn(self)


    def cursorOff(self):
        """
        cursorOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_cursorOff(self)


    def cursorBlinkOn(self):
        """
        cursorBlinkOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_cursorBlinkOn(self)


    def cursorBlinkOff(self):
        """
        cursorBlinkOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_cursorBlinkOff(self)


    def scrollDisplayLeft(self):
        """
        scrollDisplayLeft(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_scrollDisplayLeft(self)


    def scrollDisplayRight(self):
        """
        scrollDisplayRight(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_scrollDisplayRight(self)


    def entryLeftToRight(self):
        """
        entryLeftToRight(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_entryLeftToRight(self)


    def entryRightToLeft(self):
        """
        entryRightToLeft(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_entryRightToLeft(self)


    def autoscrollOn(self):
        """
        autoscrollOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_autoscrollOn(self)


    def autoscrollOff(self):
        """
        autoscrollOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_autoscrollOff(self)

Lcm1602_swigregister = _pyupm_i2clcd.Lcm1602_swigregister
Lcm1602_swigregister(Lcm1602)

class Jhd1313m1(Lcm1602):
    """Proxy of C++ upm::Jhd1313m1 class"""
    __swig_setmethods__ = {}
    for _s in [Lcm1602]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jhd1313m1, name, value)
    __swig_getmethods__ = {}
    for _s in [Lcm1602]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Jhd1313m1, name)
    __repr__ = _swig_repr

    def __init__(self, bus, lcdAddress=0x3E, rgbAddress=0x62):
        """
        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E, int rgbAddress=0x62) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int
            rgbAddress: int

        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int

        __init__(upm::Jhd1313m1 self, int bus) -> Jhd1313m1

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_Jhd1313m1(bus, lcdAddress, rgbAddress)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Jhd1313m1
    __del__ = lambda self: None

    def scroll(self, direction):
        """
        scroll(Jhd1313m1 self, bool direction) -> mraa::Result

        Parameters:
            direction: bool

        """
        return _pyupm_i2clcd.Jhd1313m1_scroll(self, direction)


    def setColor(self, r, g, b):
        """
        setColor(Jhd1313m1 self, uint8_t r, uint8_t g, uint8_t b) -> mraa::Result

        Parameters:
            r: uint8_t
            g: uint8_t
            b: uint8_t

        """
        return _pyupm_i2clcd.Jhd1313m1_setColor(self, r, g, b)

Jhd1313m1_swigregister = _pyupm_i2clcd.Jhd1313m1_swigregister
Jhd1313m1_swigregister(Jhd1313m1)

class SSD1327(LCD):
    """Proxy of C++ upm::SSD1327 class"""
    __swig_setmethods__ = {}
    for _s in [LCD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1327, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1327, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x3C):
        """
        __init__(upm::SSD1327 self, int bus, int address=0x3C) -> SSD1327

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1327 self, int bus) -> SSD1327

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_SSD1327(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1327
    __del__ = lambda self: None

    def draw(self, data, bytes):
        """
        draw(SSD1327 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int

        """
        return _pyupm_i2clcd.SSD1327_draw(self, data, bytes)


    def setGrayLevel(self, level):
        """
        setGrayLevel(SSD1327 self, uint8_t level)

        Parameters:
            level: uint8_t

        """
        return _pyupm_i2clcd.SSD1327_setGrayLevel(self, level)


    def write(self, msg):
        """
        write(SSD1327 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.SSD1327_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(SSD1327 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.SSD1327_setCursor(self, row, column)


    def clear(self):
        """
        clear(SSD1327 self) -> mraa::Result

        Parameters:
            self: upm::SSD1327 *

        """
        return _pyupm_i2clcd.SSD1327_clear(self)


    def home(self):
        """
        home(SSD1327 self) -> mraa::Result

        Parameters:
            self: upm::SSD1327 *

        """
        return _pyupm_i2clcd.SSD1327_home(self)

SSD1327_swigregister = _pyupm_i2clcd.SSD1327_swigregister
SSD1327_swigregister(SSD1327)
DISPLAY_CMD_SET_NORMAL = cvar.DISPLAY_CMD_SET_NORMAL

class SSD1308(LCD):
    """Proxy of C++ upm::SSD1308 class"""
    __swig_setmethods__ = {}
    for _s in [LCD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1308, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1308, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x3C):
        """
        __init__(upm::SSD1308 self, int bus, int address=0x3C) -> SSD1308

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1308 self, int bus) -> SSD1308

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_SSD1308(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1308
    __del__ = lambda self: None

    def draw(self, data, bytes):
        """
        draw(SSD1308 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int

        """
        return _pyupm_i2clcd.SSD1308_draw(self, data, bytes)


    def write(self, msg):
        """
        write(SSD1308 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.SSD1308_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(SSD1308 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.SSD1308_setCursor(self, row, column)


    def clear(self):
        """
        clear(SSD1308 self) -> mraa::Result

        Parameters:
            self: upm::SSD1308 *

        """
        return _pyupm_i2clcd.SSD1308_clear(self)


    def home(self):
        """
        home(SSD1308 self) -> mraa::Result

        Parameters:
            self: upm::SSD1308 *

        """
        return _pyupm_i2clcd.SSD1308_home(self)

SSD1308_swigregister = _pyupm_i2clcd.SSD1308_swigregister
SSD1308_swigregister(SSD1308)
DISPLAY_CMD_SET_NORMAL_1308 = cvar.DISPLAY_CMD_SET_NORMAL_1308


_pyupm_i2clcd.EBOLED_DEFAULT_SPI_BUS_swigconstant(_pyupm_i2clcd)
EBOLED_DEFAULT_SPI_BUS = _pyupm_i2clcd.EBOLED_DEFAULT_SPI_BUS

_pyupm_i2clcd.EBOLED_DEFAULT_CD_swigconstant(_pyupm_i2clcd)
EBOLED_DEFAULT_CD = _pyupm_i2clcd.EBOLED_DEFAULT_CD

_pyupm_i2clcd.EBOLED_DEFAULT_RESET_swigconstant(_pyupm_i2clcd)
EBOLED_DEFAULT_RESET = _pyupm_i2clcd.EBOLED_DEFAULT_RESET
class EBOLED(LCD):
    """Proxy of C++ upm::EBOLED class"""
    __swig_setmethods__ = {}
    for _s in [LCD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EBOLED, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EBOLED, name)
    __repr__ = _swig_repr

    def __init__(self, spi=0, CD=36, reset=48):
        """
        __init__(upm::EBOLED self, int spi=0, int CD=36, int reset=48) -> EBOLED

        Parameters:
            spi: int
            CD: int
            reset: int

        __init__(upm::EBOLED self, int spi=0, int CD=36) -> EBOLED

        Parameters:
            spi: int
            CD: int

        __init__(upm::EBOLED self, int spi=0) -> EBOLED

        Parameters:
            spi: int

        __init__(upm::EBOLED self) -> EBOLED
        """
        this = _pyupm_i2clcd.new_EBOLED(spi, CD, reset)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_EBOLED
    __del__ = lambda self: None

    def refresh(self):
        """
        refresh(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *

        """
        return _pyupm_i2clcd.EBOLED_refresh(self)


    def write(self, msg):
        """
        write(EBOLED self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.EBOLED_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(EBOLED self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.EBOLED_setCursor(self, row, column)


    def setTextColor(self, textColor):
        """
        setTextColor(EBOLED self, uint8_t textColor)

        Parameters:
            textColor: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_setTextColor(self, textColor)


    def setTextSize(self, size):
        """
        setTextSize(EBOLED self, uint8_t size)

        Parameters:
            size: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_setTextSize(self, size)


    def setTextWrap(self, wrap):
        """
        setTextWrap(EBOLED self, uint8_t wrap)

        Parameters:
            wrap: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_setTextWrap(self, wrap)


    def drawChar(self, x, y, data, color, size):
        """
        drawChar(EBOLED self, uint8_t x, uint8_t y, uint8_t data, uint8_t color, uint8_t size)

        Parameters:
            x: uint8_t
            y: uint8_t
            data: uint8_t
            color: uint8_t
            size: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawChar(self, x, y, data, color, size)


    def clear(self):
        """
        clear(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *

        """
        return _pyupm_i2clcd.EBOLED_clear(self)


    def clearScreenBuffer(self):
        """
        clearScreenBuffer(EBOLED self)

        Parameters:
            self: upm::EBOLED *

        """
        return _pyupm_i2clcd.EBOLED_clearScreenBuffer(self)


    def home(self):
        """
        home(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *

        """
        return _pyupm_i2clcd.EBOLED_home(self)


    def drawPixel(self, *args):
        """
        drawPixel(EBOLED self, int8_t x, int8_t y, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            color: uint8_t

        drawPixel(EBOLED self, int8_t x, int8_t y)

        Parameters:
            x: int8_t
            y: int8_t

        """
        return _pyupm_i2clcd.EBOLED_drawPixel(self, *args)


    def drawLine(self, *args):
        """
        drawLine(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            color: uint8_t

        drawLine(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t

        """
        return _pyupm_i2clcd.EBOLED_drawLine(self, *args)


    def drawLineHorizontal(self, *args):
        """
        drawLineHorizontal(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            color: uint8_t

        drawLineHorizontal(EBOLED self, int8_t x, int8_t y, uint8_t width)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawLineHorizontal(self, *args)


    def drawLineVertical(self, *args):
        """
        drawLineVertical(EBOLED self, int8_t x, int8_t y, uint8_t height, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            height: uint8_t
            color: uint8_t

        drawLineVertical(EBOLED self, int8_t x, int8_t y, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            height: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawLineVertical(self, *args)


    def drawRectangle(self, *args):
        """
        drawRectangle(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t
            color: uint8_t

        drawRectangle(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawRectangle(self, *args)


    def drawRoundedRectangle(self, x, y, width, height, radius, color):
        """
        drawRoundedRectangle(EBOLED self, int8_t x, int8_t y, int8_t width, int8_t height, int16_t radius, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            width: int8_t
            height: int8_t
            radius: int16_t
            color: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawRoundedRectangle(self, x, y, width, height, radius, color)


    def drawRectangleFilled(self, *args):
        """
        drawRectangleFilled(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t
            color: uint8_t

        drawRectangleFilled(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawRectangleFilled(self, *args)


    def drawTriangle(self, *args):
        """
        drawTriangle(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t
            color: uint8_t

        drawTriangle(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t

        """
        return _pyupm_i2clcd.EBOLED_drawTriangle(self, *args)


    def drawTriangleFilled(self, x0, y0, x1, y1, x2, y2, color):
        """
        drawTriangleFilled(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t
            color: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawTriangleFilled(self, x0, y0, x1, y1, x2, y2, color)


    def drawCircle(self, *args):
        """
        drawCircle(EBOLED self, int16_t x0, int16_t y0, int16_t radius, uint8_t color)

        Parameters:
            x0: int16_t
            y0: int16_t
            radius: int16_t
            color: uint8_t

        drawCircle(EBOLED self, int16_t x0, int16_t y0, int16_t radius)

        Parameters:
            x0: int16_t
            y0: int16_t
            radius: int16_t

        """
        return _pyupm_i2clcd.EBOLED_drawCircle(self, *args)


    def drawRoundCorners(self, x0, y0, radius, cornername, color):
        """
        drawRoundCorners(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t cornername, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            cornername: uint8_t
            color: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawRoundCorners(self, x0, y0, radius, cornername, color)


    def drawCircleFilled(self, x0, y0, radius, color):
        """
        drawCircleFilled(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            color: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawCircleFilled(self, x0, y0, radius, color)


    def drawRoundedCornersFilled(self, x0, y0, radius, cornername, delta, color):
        """
        drawRoundedCornersFilled(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t cornername, int16_t delta, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            cornername: uint8_t
            delta: int16_t
            color: uint8_t

        """
        return _pyupm_i2clcd.EBOLED_drawRoundedCornersFilled(self, x0, y0, radius, cornername, delta, color)


    def fillScreen(self, *args):
        """
        fillScreen(EBOLED self, uint8_t color)

        Parameters:
            color: uint8_t

        fillScreen(EBOLED self)

        Parameters:
            self: upm::EBOLED *

        """
        return _pyupm_i2clcd.EBOLED_fillScreen(self, *args)

EBOLED_swigregister = _pyupm_i2clcd.EBOLED_swigregister
EBOLED_swigregister(EBOLED)
COLOR_WHITE = cvar.COLOR_WHITE
COLOR_BLACK = cvar.COLOR_BLACK
COLOR_XOR = cvar.COLOR_XOR
OLED_WIDTH = cvar.OLED_WIDTH
VERT_COLUMNS = cvar.VERT_COLUMNS
OLED_HEIGHT = cvar.OLED_HEIGHT
BUFFER_SIZE = cvar.BUFFER_SIZE

class SAINSMARTKS(Lcm1602):
    """Proxy of C++ upm::SAINSMARTKS class"""
    __swig_setmethods__ = {}
    for _s in [Lcm1602]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAINSMARTKS, name, value)
    __swig_getmethods__ = {}
    for _s in [Lcm1602]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SAINSMARTKS, name)
    __repr__ = _swig_repr

    def __init__(self, rs=8, enable=9, d0=4, d1=5, d2=6, d3=7, keypad=0):
        """
        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6, uint8_t d3=7, uint8_t keypad=0) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t
            keypad: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6, uint8_t d3=7) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8) -> SAINSMARTKS

        Parameters:
            rs: uint8_t

        __init__(upm::SAINSMARTKS self) -> SAINSMARTKS
        """
        this = _pyupm_i2clcd.new_SAINSMARTKS(rs, enable, d0, d1, d2, d3, keypad)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SAINSMARTKS
    __del__ = lambda self: None

    def getRawKeyValue(self):
        """
        getRawKeyValue(SAINSMARTKS self) -> float

        Parameters:
            self: upm::SAINSMARTKS *

        """
        return _pyupm_i2clcd.SAINSMARTKS_getRawKeyValue(self)

SAINSMARTKS_swigregister = _pyupm_i2clcd.SAINSMARTKS_swigregister
SAINSMARTKS_swigregister(SAINSMARTKS)

class SSD1306(LCD):
    """Proxy of C++ upm::SSD1306 class"""
    __swig_setmethods__ = {}
    for _s in [LCD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1306, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1306, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x3C):
        """
        __init__(upm::SSD1306 self, int bus, int address=0x3C) -> SSD1306

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1306 self, int bus) -> SSD1306

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_SSD1306(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1306
    __del__ = lambda self: None

    def draw(self, data, bytes):
        """
        draw(SSD1306 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int

        """
        return _pyupm_i2clcd.SSD1306_draw(self, data, bytes)


    def write(self, msg):
        """
        write(SSD1306 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.SSD1306_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(SSD1306 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.SSD1306_setCursor(self, row, column)


    def clear(self):
        """
        clear(SSD1306 self) -> mraa::Result

        Parameters:
            self: upm::SSD1306 *

        """
        return _pyupm_i2clcd.SSD1306_clear(self)


    def home(self):
        """
        home(SSD1306 self) -> mraa::Result

        Parameters:
            self: upm::SSD1306 *

        """
        return _pyupm_i2clcd.SSD1306_home(self)


    def invert(self, i):
        """
        invert(SSD1306 self, bool i) -> mraa::Result

        Parameters:
            i: bool

        """
        return _pyupm_i2clcd.SSD1306_invert(self, i)


    def startscrollright(self, start, stop):
        """
        startscrollright(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t

        """
        return _pyupm_i2clcd.SSD1306_startscrollright(self, start, stop)


    def startscrollleft(self, start, stop):
        """
        startscrollleft(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t

        """
        return _pyupm_i2clcd.SSD1306_startscrollleft(self, start, stop)


    def startscrolldiagright(self, start, stop):
        """
        startscrolldiagright(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t

        """
        return _pyupm_i2clcd.SSD1306_startscrolldiagright(self, start, stop)


    def startscrolldiagleft(self, start, stop):
        """
        startscrolldiagleft(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t

        """
        return _pyupm_i2clcd.SSD1306_startscrolldiagleft(self, start, stop)


    def stopscroll(self):
        """
        stopscroll(SSD1306 self)

        Parameters:
            self: upm::SSD1306 *

        """
        return _pyupm_i2clcd.SSD1306_stopscroll(self)


    def dim(self, dim):
        """
        dim(SSD1306 self, bool dim)

        Parameters:
            dim: bool

        """
        return _pyupm_i2clcd.SSD1306_dim(self, dim)

SSD1306_swigregister = _pyupm_i2clcd.SSD1306_swigregister
SSD1306_swigregister(SSD1306)
DISPLAY_CMD_SET_NORMAL_1306 = cvar.DISPLAY_CMD_SET_NORMAL_1306
SSD1306_SETCONTRAST = cvar.SSD1306_SETCONTRAST
SSD1306_DISPLAYALLON_RESUME = cvar.SSD1306_DISPLAYALLON_RESUME
SSD1306_DISPLAYALLON = cvar.SSD1306_DISPLAYALLON
DISPLAY_CMD_SET_INVERT_1306 = cvar.DISPLAY_CMD_SET_INVERT_1306
SSD1306_SETDISPLAYOFFSET = cvar.SSD1306_SETDISPLAYOFFSET
SSD1306_SETCOMPINS = cvar.SSD1306_SETCOMPINS
SSD1306_SETVCOMDETECT = cvar.SSD1306_SETVCOMDETECT
SSD1306_SETDISPLAYCLOCKDIV = cvar.SSD1306_SETDISPLAYCLOCKDIV
SSD1306_SETPRECHARGE = cvar.SSD1306_SETPRECHARGE
SSD1306_SETMULTIPLEX = cvar.SSD1306_SETMULTIPLEX
SSD1306_SETLOWCOLUM = cvar.SSD1306_SETLOWCOLUM
SSD1306_SETHIGHCOLUMN = cvar.SSD1306_SETHIGHCOLUMN
SSD1306_SETSTARTLINE = cvar.SSD1306_SETSTARTLINE
SSD1306_MEMORYMODE = cvar.SSD1306_MEMORYMODE
SSD1306_COLUMNADDR = cvar.SSD1306_COLUMNADDR
SSD1306_PAGEADDR = cvar.SSD1306_PAGEADDR
SSD1306_COMSCANINC = cvar.SSD1306_COMSCANINC
SSD1306_COMSCANDEC = cvar.SSD1306_COMSCANDEC
SSD1306_SEGREMAP = cvar.SSD1306_SEGREMAP
SSD1306_CHARGEPUMP = cvar.SSD1306_CHARGEPUMP
SSD1306_EXTERNALVCC = cvar.SSD1306_EXTERNALVCC
SSD1306_SWITCHCAPVCC = cvar.SSD1306_SWITCHCAPVCC
SSD1306_ACTIVATE_SCROLL = cvar.SSD1306_ACTIVATE_SCROLL
SSD1306_DEACTIVATE_SCROLL = cvar.SSD1306_DEACTIVATE_SCROLL
SSD1306_SET_VERTICAL_SCROLL_AREA = cvar.SSD1306_SET_VERTICAL_SCROLL_AREA
SSD1306_RIGHT_HORIZONTAL_SCROLL = cvar.SSD1306_RIGHT_HORIZONTAL_SCROLL
SSD1306_LEFT_HORIZONTAL_SCROLL = cvar.SSD1306_LEFT_HORIZONTAL_SCROLL
SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = cvar.SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL
SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = cvar.SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL
SSD1306_BLACK = cvar.SSD1306_BLACK
SSD1306_WHITE = cvar.SSD1306_WHITE
SSD1306_LCDWIDTH = cvar.SSD1306_LCDWIDTH
SSD1306_LCDHEIGHT = cvar.SSD1306_LCDHEIGHT

# This file is compatible with both classic and new-style classes.


